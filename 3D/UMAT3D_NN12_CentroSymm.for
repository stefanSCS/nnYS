!DIR$ FREEFORM
!CC*******************************************************************************
!C  UMAT: developed by S.C. Soare. 
!C  UMAT FOR TESTING A ONE LAYER ORTHOTROPIC HSC-NN WITH ACTIVATIONS OF DEGREE 12 (TWELVE).
!C  FURTHER DETAILS ARE IN APPENDIX-B/SECTION-2.2 OF THE ARTICLE  
!C  "ON THE USE OF NEURAL NETWORKS IN THE MODELING OF YIELD SURFACES"
!C  http://dx.doi.org/10.1002/nme.7616 
!C  This implementation is for centro-symmetric surfaces only (tension-compression symmetry).
!C
!C  The homogeneity degree = 12.   
!C
!C  THE SUBROUTINE IS DESIGNED FOR 3D STRESS STATES. 
!C  IT IS BASED ON THE FULLY IMPLICIT RETURN MAPPING ALGORITHM (with a simple line search) 
!C  ONE abaqus-STATE VARIABLE : HARDENING PARAMETER (THE EQUIVALENT PLASTIC STRAIN).
!C  IT IS ASSUMED THAT THE USER HAS DEFINED (USING THE *ORIENTATION OPTION IN ABAQUS)
!C  A LOCAL COORDINATE SYSTEM THAT ROTATES WITH THE MATERIAL (SO THAT DEROT IS ALWAYS
!C  EQUAL WITH THE IDENTITY MATRIX).
!C*****************************************************************************
!C The vector PROPS(NPROPS) contains the material properties as defined in the 
!C  *MATERIAL=USER option in ABAQUS in the following order
!C
!C  PROPS(1) = E (Young's modulus)
!C  PROPS(2) = nuP  (Poisson's ratio)
!C  Hardening laws defined: 
!C  Swift (power-)law: sigma^bar(ep^bar) = a*(b + ep^bar)**c
!C  Voce (exp-)law: sigma^bar(ep^bar) = a - b*exp(-c*ep^bar) 
!C  Read further naming/renaming convention in the HARDENING section of this code 
!C  (other hardening laws can be implemented in the same section) 
!C  PROPS(3) = a 
!C  PROPS(4) = b
!C  PROPS(5) = c
!C  PROPS(6) = number of nodes 
!C  PROPS(7),...,PROPS(6+5*PROPS(6)): PARAMETERS OF THE YIELD FUNCTION
!C  
!C
!C!************************************************************************************** 
MODULE DEFS
IMPLICIT NONE 
INTEGER,PARAMETER::PREC=8
REAL(PREC),PARAMETER::SQ2=DSQRT(2.0D0),SQ6=DSQRT(6.0D0)
REAL(PREC),PARAMETER::SQ3=DSQRT(3.0D0),SQ23=DSQRT(2.0D0/3.0D0)
REAL(PREC),PARAMETER::ZPOW=1.0D0/12.0D0
END MODULE DEFS


!CCCC-----NOTE: the UMAT interface may vary with the ABAQUS version (below is the older interface)	
!C	SUBROUTINE UMAT(STRESS,STATEV,DDSDDE,SSE,SPD,SCD, &
!C      RPL,DDSDDT,DRPLDE,DRPLDT, &
!C      STRAN,DSTRAN,TIME,DTIME,TEMP,DTEMP,PREDEF,DPRED,CMNAME, &
!C      NDI,NSHR,NTENS,NSTATV,PROPS,NPROPS,COORDS,DROTT,PNEWDT, &
!C      CELENT,DFGRD0,DFGRD1,NOEL,NPT,LAYER,KSPT,KSTEP,KINC)

    SUBROUTINE UMAT(STRESS,STATEV,DDSDDE,SSE,SPD,SCD, &
      RPL,DDSDDT,DRPLDE,DRPLDT, &
      STRAN,DSTRAN,TIME,DTIME,TEMP,DTEMP,PREDEF,DPRED,CMNAME, &
      NDI,NSHR,NTENS,NSTATV,PROPS,NPROPS,COORDS,DROT,PNEWDT, &
      CELENT,DFGRD0,DFGRD1,NOEL,NPT,LAYER,KSPT,JSTEP,KINC)

!CCC---NOTE: the INCLUDE directive enforces implicit casting in conflict with 'IMPLICIT NONE'
!CC          use 'IMPLICIT NONE' in the testing/implementation phase and then comment it out 
!    IMPLICIT NONE      	
	INCLUDE 'ABA_PARAM.INC'
!C    INTEGER, PARAMETER :: PREC =  SELECTED_REAL_KIND(15,307)
    INTEGER, PARAMETER :: PREC = 8
!C******************************************************************************
!C  VARIABLES REQUIRED BY ABAQUS (THE ARGUMENTS OF THE SUBROUTINE)
!C  FOR A DESCRIPTION OF THE LIST OF VARIABLES SEE ABAQUS MANUAL 

!C    !!!CHARACTER(80)::  CMNAME
	CHARACTER*80 CMNAME
    REAL(PREC)::SSE,SPD,SCD,RPL,DRPLDT,DTIME,TEMP,DTEMP,PNEWDT,CELENT
    INTEGER::NDI,NSHR,NTENS,NSTATV,NPROPS,NOEL,NPT,LAYER,KSPT,KINC
    REAL(PREC),DIMENSION(NTENS):: STRESS,DDSDDT,DRPLDE,STRAN,DSTRAN
    REAL(PREC),DIMENSION (NTENS, NTENS) :: DDSDDE 
    REAL(PREC),DIMENSION(NSTATV) :: STATEV
    REAL(PREC),DIMENSION(NPROPS) :: PROPS
    REAL(PREC),DIMENSION(3,3) :: DFGRD0, DFGRD1, DROT
    REAL(PREC),DIMENSION(3) :: COORDS
    REAL(PREC),DIMENSION(2) :: TIME
    REAL(PREC),DIMENSION(1) :: PREDEF, DPRED
    INTEGER,DIMENSION(4)::JSTEP
		
!C    CHARACTER*80 CMNAME
!C	INTEGER::NDI,NSHR,NTENS,NSTATV,NPROPS,NOEL,NPT,LAYER,KSPT,KINC
!C	REAL(PREC)::SSE,SPD,SCD,RPL,DRPLDT,DTIME,TEMP,DTEMP,PNEWDT,CELENT
!C    REAL(PREC),DIMENSION::STRESS(NTENS),STATEV(NSTATV),DDSDDE(NTENS,NTENS), &
!C	DDSDDT(NTENS),DRPLDE(NTENS),STRAN(NTENS),DSTRAN(NTENS), &
!C	TIME(2),PREDEF(1),DPRED(1),PROPS(NPROPS), &
!C	COORDS(3),DROT(3,3),DFGRD0(3,3),DFGRD1(3,3)
!C	INTEGER,DIMENSION::JSTEP(4)	
	
!C*******************************************************************************
!C  INTERNAL VARIABLES OF THE SUBROUTINE
    REAL(PREC), PARAMETER::ZERO=0.0D0
	
!C  elastic constants	
    REAL(PREC):: EMOD,NUPS, EC11,EC12,EC44

!C    HARDENING PARAMETERS
    REAL(PREC)::AA,BB,CC
	
!C  number of nodes 
    INTEGER::NNODES

!C  weights
    REAL(PREC),ALLOCATABLE,DIMENSION(:,:)::VVWW	

!C      COMPLIANCE TENSOR
    REAL(PREC),DIMENSION(NTENS,NTENS)::SCOMP

!C    STRESS TENSOR AND ITS INCREMENTS
    REAL(PREC),DIMENSION(NTENS)::SIGMA, DSIGMA, D2SIGMA, DSIGMA_OLD, D2SIGMA_OLD

!C    EQUIVALENT PLASTIC STRAIN AND ITS INCREMENTS
    REAL(PREC):: EPBAR, DEPBAR, D2EPBAR, TEPBAR, D2EPBAR_OLD, DEPBAR_OLD

!C    HARDENING VALUES
    REAL(PREC):: HF, HPF

!C    YIELD FUNCTION VALUE, GRADIENT AND HESSIAN
    REAL(PREC):: YF
	REAL(PREC),DIMENSION(NTENS)::GYF
	REAL(PREC),DIMENSION(NTENS,NTENS)::HYF

!C    CONVERGENCE TOLERANCES
!    REAL(PREC),PARAMETER::TOL1=1.0E-006, TOL2=1.0E-009
	REAL(PREC),PARAMETER::TOL1=DBLE(1.0E-005)

!C    TEMPORARY HOLDERS
    REAL(PREC)::TT, TTA, TTB, ZALPHA, F1, FZERO
	REAL(PREC),DIMENSION(NTENS)::YVECTOR, F2
	REAL(PREC),DIMENSION(NTENS,NTENS)::XIMAT

!C    LOOP COUNTERS
    INTEGER::K1,K2, NRK, KWHILE

!C    NEWTON-RAPHSON MAXIMUM NUMBER OF ITERATIONS
    INTEGER,PARAMETER:: NRMAX=300  

    
	
!C  elastic constants	
    EMOD=PROPS(1)
	NUPS=PROPS(2)

!C    HARDENING PARAMETERS
    AA=PROPS(3)
	BB=PROPS(4)
	CC=PROPS(5)	

!C  MATRIX OF MATERIAL PARAMETERS (WEIGHTS)
	NNODES=PROPS(6)
	ALLOCATE(VVWW(5,NNODES))
	K2=7
	DO K1=1,NNODES,1
	    VVWW(1,K1)=PROPS(K2)
		K2=K2+1
		VVWW(2,K1)=PROPS(K2)
		K2=K2+1
		VVWW(3,K1)=PROPS(K2)
		K2=K2+1
		VVWW(4,K1)=PROPS(K2)
		K2=K2+1
		VVWW(5,K1)=PROPS(K2)
		K2=K2+1
    END DO

!C********************************************
!C RECOVER THE EQUIVALENT PLASTIC STRAIN 
!C AT THE BEGINING OF THE INCREMENT
    EPBAR = STATEV(1)
      
!C!********************************************
!C DEFINE THE STIFFNESS TENSOR C
!C (IT WILL BE STORED IN DDSDDE)
    TT=(1.0D0+NUPS)*(1.0D0-2.0D0*NUPS)
	EC11=(EMOD*(1.0D0-NUPS))/TT
	EC12=(EMOD*NUPS)/TT
	EC44=0.5D0*(EC11-EC12)
    DDSDDE=ZERO
	DDSDDE(1,1)=EC11
	DDSDDE(2,1)=EC12
	DDSDDE(3,1)=EC12
	DDSDDE(1,2)=EC12
	DDSDDE(2,2)=EC11
	DDSDDE(3,2)=EC12
	DDSDDE(1,3)=EC12
	DDSDDE(2,3)=EC12
	DDSDDE(3,3)=EC11
	DDSDDE(4,4)=EC44
	DDSDDE(5,5)=EC44
	DDSDDE(6,6)=EC44

!C***********************************************
!C COMPUTE THE TRIAL STRESS : SIGMA_{N+1} = SIGMA_{N} + C[DELTA_EPSILON]
    DO K1=1,3,1
        TT = DDSDDE(K1,1)*DSTRAN(1)+DDSDDE(K1,2)*DSTRAN(2)+DDSDDE(K1,3)*DSTRAN(3)
	    DSIGMA(K1) = TT
		DSIGMA_OLD(K1)=TT
	    SIGMA(K1)=STRESS(K1)+TT
    END DO
    DO K1=4,NTENS,1
        TT = DDSDDE(K1,K1) * DSTRAN(K1)
	    DSIGMA(K1)=TT
		DSIGMA_OLD(K1)=TT
	    SIGMA(K1)=STRESS(K1)+TT
    END DO
!C***********************************************************	

!C CHECK YIELDING CONDITION
      CALL KHARD(HF,HPF,EPBAR,AA,BB,CC)
      CALL YFUNCTION(SIGMA, YF, VVWW, NNODES)

	IF (YF <= HF) THEN
!C        ELASTIC STEP :  UPDATE STRESS
	  STRESS = SIGMA
!C      DDSDDE HAS BEEN DEFINED ABOVE
!C      THE EQUIVALENT PLASTIC STRAIN, STATEV(1), REMAINS UNCHANGED
      RETURN
	END IF

!C***********************************************
!C MAIN LOOP : RETURN MAPPING ALGORITHM


!C   DEFINE COMPLIANCE (note that it outputs ENGINEERING shears)
	EC11=1.0D0/EMOD
	EC12=-NUPS/EMOD
	EC44=1.0D0/EC44
	SCOMP=ZERO
	SCOMP(1,1)=EC11
	SCOMP(2,1)=EC12
	SCOMP(3,1)=EC12
	SCOMP(1,2)=EC12
	SCOMP(2,2)=EC11
	SCOMP(3,2)=EC12
	SCOMP(1,3)=EC12
	SCOMP(2,3)=EC12
	SCOMP(3,3)=EC11
	SCOMP(4,4)=EC44
	SCOMP(5,5)=EC44
	SCOMP(6,6)=EC44

!C     PRELIMINARY N-R STEP
!C**************************************************************      
    DEPBAR=ZERO
	DEPBAR_OLD=ZERO

	CALL GYFUNCTION(SIGMA, YF, GYF, VVWW, NNODES)
	F1=YF-HF

!C    ASSEMBLE XIMAT MATRIX AND Y-VECTOR
    DO K1=1,NTENS,1
	  YVECTOR(K1)=F1*GYF(K1)
	DO K2=K1,NTENS,1
	  TT=HPF*SCOMP(K1,K2)+GYF(K1)*GYF(K2)
	  XIMAT(K1,K2)=TT
	  XIMAT(K2,K1)=TT
	END DO
	END DO

!C     SOLVE FOR STRESS NR-INCREMENT
    CALL BFACTOR(NTENS,XIMAT)
	CALL BSOLVE(NTENS,XIMAT,YVECTOR,D2SIGMA)
	D2SIGMA_OLD(1:)=D2SIGMA(1:)

!C     CALCULATE EQUIVALENT PLASTIC STRAIN NR-INCREMENT 
    D2EPBAR=ZERO
	DO K1=1,NTENS,1
	  D2EPBAR=D2EPBAR+GYF(K1)*D2SIGMA(K1)
	END DO
	D2EPBAR=(F1-D2EPBAR)/HPF
    D2EPBAR_OLD=D2EPBAR


!C      UPDATE
    DEPBAR=DEPBAR+D2EPBAR
	DO K1=1,NTENS,1
	  DSIGMA(K1)=DSIGMA(K1)-D2SIGMA(K1)
	END DO
	
	ZALPHA=1.0D0
!C     BEGIN N-R ITERATIONS
!C******************************************************
    DO NRK=1,NRMAX,1

!C     CALCULATE NEW VALUES ASSOCIATED WITH NEW CURRENT STATE
      TEPBAR=EPBAR+DEPBAR
      CALL KHARD(HF,HPF,TEPBAR,AA,BB,CC)
	  SIGMA=STRESS+DSIGMA
	  CALL HYFUNCTION(SIGMA, YF, GYF, HYF, VVWW, NNODES)

	  F1=YF-HF
	  FZERO=F1*F1
	  DO K1=1,NTENS,1
        TT=DEPBAR*GYF(K1)-DSTRAN(K1)
        DO K2=1,NTENS,1
          TT=TT+SCOMP(K1,K2)*DSIGMA(K2)
        END DO
        F2(K1)=TT
        FZERO=FZERO+TT*TT
      END DO
      FZERO=DSQRT(FZERO)


!C     CHECK TOLERANCES
      IF (FZERO<TOL1) EXIT


!C    ASSEMBLE XIMAT MATRIX AND Y-VECTOR
      DO K1=1,NTENS,1
	    YVECTOR(K1)=F1*GYF(K1)+HPF*F2(K1)
	    DO K2=K1,NTENS,1
	      TT=HPF*(SCOMP(K1,K2)+DEPBAR*HYF(K1,K2))+GYF(K1)*GYF(K2)
	      XIMAT(K1,K2)=TT
	      XIMAT(K2,K1)=TT
	    END DO
	  END DO

!C     SOLVE FOR STRESS NR-INCREMENT
      CALL BFACTOR(NTENS,XIMAT)
	  CALL BSOLVE(NTENS,XIMAT,YVECTOR,D2SIGMA)
    
!C     CALCULATE EQUIVALENT PLASTIC STRAIN NR-INCREMENT
	  D2EPBAR=ZERO
	  DO K1=1,NTENS,1
	      D2EPBAR=D2EPBAR+GYF(K1)*D2SIGMA(K1)
	  END DO	
      D2EPBAR=(F1-D2EPBAR)/HPF	  
      
	  IF(.FALSE. .AND. (D2EPBAR<ZERO)) THEN
	  !!IF(D2EPBAR<ZERO) THEN
!****************************************************************************
      DO KWHILE=1,8,1
          ZALPHA=0.5D0*ZALPHA
          DEPBAR=DEPBAR_OLD+ZALPHA*D2EPBAR_OLD		  
		  TEPBAR=EPBAR+DEPBAR
		  CALL KHARD(HF,HPF,TEPBAR,AA,BB,CC)
		  DSIGMA=DSIGMA_OLD-ZALPHA*D2SIGMA_OLD
		  SIGMA=STRESS+DSIGMA
		  CALL HYFUNCTION(SIGMA, YF, GYF, HYF, VVWW, NNODES)

		  F1=YF-HF
		  DO K1=1,NTENS,1
			TT=DEPBAR*GYF(K1)-DSTRAN(K1)
			DO K2=1,NTENS,1
			  TT=TT+SCOMP(K1,K2)*DSIGMA(K2)
			END DO
			F2(K1)=TT
		  END DO

	!C    ASSEMBLE XIMAT MATRIX AND Y-VECTOR
		  DO K1=1,NTENS,1
			YVECTOR(K1)=F1*GYF(K1)+HPF*F2(K1)
			DO K2=K1,NTENS,1
			  TT=HPF*(SCOMP(K1,K2)+DEPBAR*HYF(K1,K2))+GYF(K1)*GYF(K2)
			  XIMAT(K1,K2)=TT
			  XIMAT(K2,K1)=TT
			END DO
		  END DO

	!C     SOLVE FOR STRESS NR-INCREMENT
		  CALL BFACTOR(NTENS,XIMAT)
		  CALL BSOLVE(NTENS,XIMAT,YVECTOR,D2SIGMA)
		  D2EPBAR=ZERO
		  DO K1=1,NTENS,1
			  D2EPBAR=D2EPBAR+GYF(K1)*D2SIGMA(K1)
		  END DO	
		  D2EPBAR=(F1-D2EPBAR)/HPF	
		  IF(D2EPBAR>=ZERO) EXIT
	  END DO	  
	  ZALPHA=1.0D0
!****************************************************************************	
      ELSE
        !C     DO LINE SEARCH
        CALL LSEARCH(STRESS,DSIGMA,D2SIGMA,DSTRAN,EPBAR,DEPBAR,D2EPBAR,&
	               FZERO,SCOMP,VVWW,NNODES,AA,BB,CC,ZALPHA)  	  
	  END IF
	  
	  D2EPBAR_OLD=D2EPBAR
	  DEPBAR_OLD=DEPBAR
	  D2SIGMA_OLD(1:)=D2SIGMA(1:)
	  DSIGMA_OLD(1:)=DSIGMA(1:)


!C      UPDATE
      DEPBAR=DEPBAR+ZALPHA*D2EPBAR
	  DO K1=1,NTENS,1
	     DSIGMA(K1)=DSIGMA(K1)-ZALPHA*D2SIGMA(K1)
	  END DO


	END DO !!! END OF NEWTON-RAPHSON ITERATIONS	
        
!C     UPDATE STATE VARIABLE
    STATEV(1)=EPBAR+DEPBAR

!C     UPDATE STRESS
    STRESS = STRESS+DSIGMA

!CCCCCCCCC****** COMPUTE TANGENT MODULUS: DDSDDE	

!C     COMPUTE XIMAT MATRIX 
    DO K1=1,NTENS,1
	DO K2=K1,NTENS,1
	  TT=SCOMP(K1,K2)+DEPBAR*HYF(K1,K2)
	  XIMAT(K1,K2)=TT
	  XIMAT(K2,K1)=TT
	END DO
	END DO

!C     INVERT XIMAT AND STORE XIMAT^(-1) INTO SCOMP (NO LONGER NEEDED)
	F2=ZERO

    CALL BFACTOR(NTENS,XIMAT)
	DO K1=1,NTENS,1
	F2(K1)=1.0D0
	CALL BSOLVE(NTENS,XIMAT,F2,DSIGMA)
	DO K2=1,NTENS,1
	SCOMP(K2,K1)=DSIGMA(K2)
	END DO
	F2(K1)=ZERO
	END DO

!C     CALCULATE  SCOMP[GYF] AND STORE IT INTO DSIGMA
    DO K1=1,NTENS,1
	TT=ZERO
	DO K2=1,NTENS,1
	TT=TT+SCOMP(K1,K2)*GYF(K2)
	END DO
	DSIGMA(K1)=TT
	END DO

!C     CALCULATE 1/K
    TT=HPF
	DO K1=1,NTENS,1
	TT=TT+GYF(K1)*DSIGMA(K1)
	END DO

!C     UPDATE DDSDDE
    DO K1=1,NTENS,1
	DO K2=K1,NTENS,1
	TTB=SCOMP(K1,K2)-DSIGMA(K1)*DSIGMA(K2)/TT
	DDSDDE(K1,K2)=TTB
	DDSDDE(K2,K1)=TTB
	END DO
	END DO

    RETURN
    END SUBROUTINE  UMAT

!C**********************************************************************	

    SUBROUTINE KHARD(HF,HPF,EPBAR,AAZ,BBZ,CCZ)
!C  SWIFT(POWER LAW)    COMPUTES THE HARDENING AND ITS DERIVATIVE

    IMPLICIT NONE
    INTEGER, PARAMETER :: PREC = 8
	REAL(PREC) :: HF, HPF, AAZ, BBZ, CCZ
	REAL(PREC) :: EPBAR,TEMP

     TEMP=(BBZ+EPBAR)
     HF  = AAZ * (TEMP**CCZ)
     HPF =  (CCZ/TEMP) * HF
    
	RETURN
	END SUBROUTINE KHARD
	
      
    SUBROUTINE zzKHARD(HF,HPF,EPBAR,AAZ,BBZ,CCZ)
!C  VOCE(EXPONENTIAL LAW)    COMPUTES THE HARDENING AND ITS DERIVATIVE
    IMPLICIT NONE
    INTEGER, PARAMETER :: PREC = 8
	REAL(PREC) :: HF, HPF, AAZ, BBZ, CCZ
	REAL(PREC) :: EPBAR,TEMP
      TEMP = BBZ*DEXP(-CCZ*EPBAR)
      HF  = AAZ - TEMP
      HPF =  CCZ * TEMP

	RETURN
	END SUBROUTINE zzKHARD

!C**********************************************************************
	SUBROUTINE LSEARCH(STRESS,DSIGMA,D2SIGMA,DSTRAN,EPBAR,DEPBAR,D2EPBAR,&
	                   FZERO,SCOMP,VVWW,NNODES,AAZ,BBZ,CCZ,ZALPHA)

	IMPLICIT NONE
	INTEGER,PARAMETER::PREC=8
	INTEGER,PARAMETER::NTENS=6

    INTEGER::NNODES
	REAL(PREC),DIMENSION(5,NNODES)::VVWW
	REAL(PREC),DIMENSION(NTENS)::STRESS,DSIGMA,D2SIGMA,DSTRAN
	REAL(PREC),DIMENSION(NTENS,NTENS)::SCOMP
	REAL(PREC)::EPBAR,DEPBAR,D2EPBAR,FZERO,AAZ,BBZ,CCZ,ZALPHA


!C     INTERNAL VARIABLES
    REAL(PREC),DIMENSION(NTENS)::SIGMA,TDSIGMA,GYF  
	REAL(PREC)::HF,HPF,TEPBAR,TDEPBAR,YF,TT,TTT
	INTEGER::KK,JJ

     
	DO KK=1,NTENS,1
	  TDSIGMA(KK)=DSIGMA(KK)-D2SIGMA(KK)
      SIGMA(KK)=STRESS(KK)+TDSIGMA(KK)
	END DO
	TDEPBAR=DEPBAR+D2EPBAR
	TEPBAR=EPBAR+TDEPBAR
	
	CALL KHARD(HF,HPF,TEPBAR,AAZ,BBZ,CCZ)
	CALL GYFUNCTION(SIGMA,YF,GYF,VVWW,NNODES)
	
    TTT=(YF-HF)*(YF-HF)
	DO KK=1,NTENS,1
	TT=TDEPBAR*GYF(KK)-DSTRAN(KK)
	DO JJ=1,NTENS,1
	TT=TT+SCOMP(KK,JJ)*TDSIGMA(JJ)
	END DO
	TTT=TTT+TT*TT
	END DO

    ZALPHA=1.0D0
    IF (DSQRT(TTT)>=0.6D0*FZERO) THEN
	  !!!ZALPHA=DMIN1(0.25D0,ZALPHA)
	  ZALPHA=0.3D0
    END IF

	RETURN
	END SUBROUTINE LSEARCH

!CCCCCC*********************************************************************
!CCCCCCCCC *** LINEAR SOLVER: CHOLESKY
!CCCCCC*********************************************************************

	SUBROUTINE BFACTOR(N,A)


!C     RECEIVES SYMMETRIC AND POS DEF MATRIX A OF DIMENSION N,
!C     AND RETURNS THE B-MATRIX OF THE L-U FACTORIZATION A=BB^T
!C    (THE UPPER PART OF A IS USED)
!C    (ONLY THE LOWER PART OF B IS POPULATED)
!CCCC     NOTE: THE A MATRIX IS REPLACED WITH ITS CHOLESKY DECOMPOSITION

    IMPLICIT NONE
	INTEGER,PARAMETER::PREC=8

    INTEGER::N
    REAL(PREC),DIMENSION(N,N)::A   


!C    INTERNAL VARIABLES
    INTEGER::KK,PP,JJ
    REAL(PREC)::TEMP
	REAL(PREC),PARAMETER::ZERO=0.000000000


!C     COMPUTE FIRST COLUMN 

    TEMP=DSQRT(A(1,1))
	A(1,1)=TEMP
    DO KK=2,N,1
	A(KK,1)=A(1,KK)/TEMP
    END DO

    DO PP=2,N,1
!C     COMPUTE COLUMN PP

!C     COMPUTE B(PP,PP)
    TEMP=ZERO
    DO KK=1,PP-1,1
	TEMP=TEMP+A(PP,KK)*A(PP,KK)
    END DO 
    A(PP,PP) = DSQRT(A(PP,PP)-TEMP) 

!C     COMPUTE B(JJ,PP), FOR JJ>=PP+1
    DO JJ=PP+1,N,1
    TEMP=ZERO
      DO KK=1,PP-1,1
	   TEMP=TEMP+A(PP,KK)*A(JJ,KK)
      END DO
	  A(JJ,PP)=(A(PP,JJ)-TEMP)/A(PP,PP)
    END DO 

    END DO  !!! END COMPUTE COLUMN PP

    RETURN
    END SUBROUTINE BFACTOR

    SUBROUTINE BSOLVE(N,B,Z,X)


!C     RECEIVES THE LOWER TRIANGULAR MATRIX B(N,N),
!C     THE RIGHT-HAND N-VECTOR Z,
!C     AND SOLVES FOR X THE SYSTEM (BB^T)X=Z
 
    IMPLICIT NONE
	INTEGER,PARAMETER::PREC=8

    INTEGER::N
    REAL(PREC),DIMENSION(N,N)::B
    REAL(PREC),DIMENSION(N)::Z,X

!C     INTERNAL VARIABLES
    INTEGER::KK,PP
    REAL(PREC),DIMENSION(N)::Y
    REAL(PREC)::TEMP
	REAL(PREC),PARAMETER::ZERO=0.0000000

!C     SOLVE FIRST B:Y=Z
      Y(1)=Z(1)/B(1,1)

      DO PP=2,N,1

      TEMP=ZERO
      DO KK=1,PP-1,1
      TEMP=TEMP+B(PP,KK)*Y(KK)
      END DO
      Y(PP) = (Z(PP)-TEMP)/B(PP,PP)

      END DO

!C     SOLVE FOR X
      X(N)=Y(N)/B(N,N)

      DO PP=N-1,1,-1

      TEMP=ZERO
      DO KK=PP+1,N,1
      TEMP=TEMP+B(KK,PP)*X(KK)
      END DO
      X(PP) = (Y(PP)-TEMP)/B(PP,PP)

      END DO

    RETURN
    END SUBROUTINE BSOLVE
!C***********************************************************************************



!CCCCCCC********** YIELD FUNCTION CALCULATIONS
!CCCCCCC        YFUNCTION RETURNS JUST YIELD FUNCTION VALUE
!CCCCCCC        GYFUNCTION RETURNS YIELD FUNCTION VALUE AND GRADIENT
!CCCCCCC        HYFUNCTION RETURNS YIELD FUNCTION VALUE, GRADIENT AND HESSIAN

    SUBROUTINE YFUNCTION(SIGMA, YF, VVWW, NNODES)
    USE DEFS
    IMPLICIT NONE
!	INTEGER,PARAMETER::PREC=8
	INTEGER,PARAMETER::NTENS=6
	INTEGER::NNODES
	REAL(PREC),DIMENSION(NTENS)::SIGMA
	REAL(PREC),DIMENSION(5,NNODES)::VVWW
	REAL(PREC)::YF

	REAL(PREC),DIMENSION(5)::SDEV, SW
	REAL(PREC),DIMENSION(4)::SG, SG2, SG8
    REAL(PREC)::YG
    INTEGER::JJ
!	REAL(PREC),DIMENSION(NTENS)::CSIGMA
    REAL(PREC),PARAMETER::NORM=100.0D0

!    DO JJ=1,NTENS,1
!	  CSIGMA(JJ)=SIGMA(JJ)/NORM
!	END DO
	
    SDEV(1)=(2.0D0*SIGMA(1)-SIGMA(2)-SIGMA(3))/(SQ6*NORM)
	SDEV(2)=(SIGMA(2)-SIGMA(3))/(SQ2*NORM)
	SDEV(3)=SIGMA(4)*SQ2/NORM
	SDEV(4)=SIGMA(5)*SQ2/NORM
	SDEV(5)=SIGMA(6)*SQ2/NORM

	YG=0.0D0
	DO JJ=1,NNODES,1
	    SW(1)=SDEV(1)*VVWW(1,JJ)
		SW(2)=SDEV(2)*VVWW(2,JJ)
		SW(3)=SDEV(3)*VVWW(3,JJ)
		SW(4)=SDEV(4)*VVWW(4,JJ)
		SW(5)=SDEV(5)*VVWW(5,JJ)
	    SG(1)=SW(1)+SW(2)+SW(3)+SW(4)+SW(5)
		SG2(1)=SG(1)*SG(1)
		SG8(1)=SG2(1)*SG2(1)
		SG8(1)=SG8(1)*SG8(1)
		SG(2)=SW(1)+SW(2)-SW(3)-SW(4)+SW(5)
		SG2(2)=SG(2)*SG(2)
		SG8(2)=SG2(2)*SG2(2)
		SG8(2)=SG8(2)*SG8(2)
		SG(3)=SW(1)+SW(2)-SW(3)+SW(4)-SW(5)
		SG2(3)=SG(3)*SG(3)
		SG8(3)=SG2(3)*SG2(3)
		SG8(3)=SG8(3)*SG8(3)
		SG(4)=SW(1)+SW(2)+SW(3)-SW(4)-SW(5)
		SG2(4)=SG(4)*SG(4)
		SG8(4)=SG2(4)*SG2(4)
		SG8(4)=SG8(4)*SG8(4)
		YG=YG+SG8(1)*SG2(1)*SG2(1)+SG8(2)*SG2(2)*SG2(2)+SG8(3)*SG2(3)*SG2(3)+SG8(4)*SG2(4)*SG2(4)
    END DO

!C	 CALCULATE YIELD FUNCTION VALUE
	YF=NORM*((0.25D0*YG)**ZPOW)

	RETURN
    END SUBROUTINE YFUNCTION

!CCCCCC************************************************************************

    SUBROUTINE GYFUNCTION(SIGMA, YF, GYF, VVWW, NNODES)
    USE DEFS
    IMPLICIT NONE
!	INTEGER,PARAMETER::PREC=8
	INTEGER,PARAMETER::NTENS=6
	INTEGER::NNODES
	REAL(PREC),DIMENSION(NTENS)::SIGMA, GYF
	REAL(PREC),DIMENSION(5,NNODES)::VVWW
	REAL(PREC)::YF

	
!CC      INTERNAL PARAMETERS
	REAL(PREC),DIMENSION(5)::SDEV, SW
	REAL(PREC)::YG, TT
	REAL(PREC),DIMENSION(4)::SG, SG2, SG8, WT, SG10
    INTEGER::JJ
!	REAL(PREC),DIMENSION(NTENS)::CSIGMA
    REAL(PREC),PARAMETER::NORM=100.0D0
!C  REAL(PREC),PARAMETER::NEXP=10.0D0
!C                       	
	REAL(PREC),DIMENSION(5)::DG

	
!    DO JJ=1,NTENS,1
!	  CSIGMA(JJ)=SIGMA(JJ)/NORM
!	END DO
	
    SDEV(1)=(2.0D0*SIGMA(1)-SIGMA(2)-SIGMA(3))/(SQ6*NORM)
	SDEV(2)=(SIGMA(2)-SIGMA(3))/(SQ2*NORM)
	SDEV(3)=SIGMA(4)*SQ2/NORM
	SDEV(4)=SIGMA(5)*SQ2/NORM
	SDEV(5)=SIGMA(6)*SQ2/NORM

	YG=0.0D0
	DG=0.0D0
	DO JJ=1,NNODES,1
	    SW(1)=SDEV(1)*VVWW(1,JJ)
		SW(2)=SDEV(2)*VVWW(2,JJ)
		SW(3)=SDEV(3)*VVWW(3,JJ)
		SW(4)=SDEV(4)*VVWW(4,JJ)
		SW(5)=SDEV(5)*VVWW(5,JJ)
	    SG(1)=SW(1)+SW(2)+SW(3)+SW(4)+SW(5)
		SG2(1)=SG(1)*SG(1)
		SG8(1)=SG2(1)*SG2(1)
		SG8(1)=SG8(1)*SG8(1)
		SG10(1)=SG8(1)*SG2(1)
		SG(2)=SW(1)+SW(2)-SW(3)-SW(4)+SW(5)
		SG2(2)=SG(2)*SG(2)
		SG8(2)=SG2(2)*SG2(2)
		SG8(2)=SG8(2)*SG8(2)
		SG10(2)=SG8(2)*SG2(2)
		SG(3)=SW(1)+SW(2)-SW(3)+SW(4)-SW(5)
		SG2(3)=SG(3)*SG(3)
		SG8(3)=SG2(3)*SG2(3)
		SG8(3)=SG8(3)*SG8(3)
		SG10(3)=SG8(3)*SG2(3)
		SG(4)=SW(1)+SW(2)+SW(3)-SW(4)-SW(5)
		SG2(4)=SG(4)*SG(4)
		SG8(4)=SG2(4)*SG2(4)
		SG8(4)=SG8(4)*SG8(4)
		SG10(4)=SG8(4)*SG2(4)
		YG=YG+SG10(1)*SG2(1)+SG10(2)*SG2(2)+SG10(3)*SG2(3)+SG10(4)*SG2(4)
		SG2(1)=SG10(1)*SG(1)
		SG2(2)=SG10(2)*SG(2)
		SG2(3)=SG10(3)*SG(3)
		SG2(4)=SG10(4)*SG(4)
		WT(1)=SG2(1)+SG2(2)+SG2(3)+SG2(4)
		WT(2)=SG2(1)-SG2(2)-SG2(3)+SG2(4)
		WT(3)=SG2(1)-SG2(2)+SG2(3)-SG2(4)
		WT(4)=SG2(1)+SG2(2)-SG2(3)-SG2(4)
		DG(1)=DG(1)+VVWW(1,JJ)*WT(1)
		DG(2)=DG(2)+VVWW(2,JJ)*WT(1)
		DG(3)=DG(3)+VVWW(3,JJ)*WT(2)
		DG(4)=DG(4)+VVWW(4,JJ)*WT(3)
		DG(5)=DG(5)+VVWW(5,JJ)*WT(4)
    END DO
!C
!C	 CALCULATE YIELD FUNCTION VALUE AND GRADIENT
    
!C	DG(2)=NEXP*(DG(2)/SQ2-DG(1)/SQ6)
!C  DG(1)=NEXP*SQ23*DG(1)
!C	DG(3)=NEXP*DG(3)/SQ2
!C	DG(4)=NEXP*DG(4)/SQ2
!C	DG(5)=NEXP*DG(5)/SQ2
	DG(2)=DG(2)/SQ2-DG(1)/SQ6
    DG(1)=SQ23*DG(1)
	DG(3)=DG(3)*SQ2
	DG(4)=DG(4)*SQ2
	DG(5)=DG(5)*SQ2	
	
      
	YF=(0.25D0*YG)**ZPOW
	TT=YF/YG
	GYF(1)=TT*DG(1)
	GYF(2)=TT*DG(2)
	GYF(3)=-(GYF(1)+GYF(2))
	GYF(4)=TT*DG(3)
	GYF(5)=TT*DG(4)
	GYF(6)=TT*DG(5)
	YF=NORM*YF

	RETURN
	END SUBROUTINE GYFUNCTION


!CC     ---------------         
!CC      USE BELOW MAP WHEN CALCULATING HGG
!CC     1=(1,1)
!CC     2=(2,1)
!CC     3=(4,1)
!CC     4=(5,1)
!CC     5=(6,1)
!CC     6=(2,2)
!CC     7=(4,2)
!CC     8=(5,2)
!CC     9=(6,2)
!CC     10=(4,4)
!CC     11=(5,4)
!CC     12=(6,4)
!CC     13=(5,5)
!CC     14=(6,5)
!CC     15=(6,6)
!CC-------------------------
!CC---------------------------------------
!CCC    REDUCED CORRESPONDENCE (VARIABLE SIGMA(3) ELIMINATED).
!CC      USE BELOW MAP WHEN CALCULATING DDG (SECOND ORDER PARTIAL DERIVATIVES)
!CC    
!CC     1=(1,1)
!CC     2=(2,1)
!CC     3=(3,1)
!CC     4=(4,1)
!CC     5=(5,1)
!CC     6=(2,2)
!CC     7=(3,2)
!CC     8=(4,2)
!CC     9=(5,2)
!CC     10=(3,3)
!CC     11=(4,3)
!CC     12=(5,3)
!CC     13=(4,4)
!CC     14=(5,4)
!CC     15=(5,5)
!CCCC**************************************************************************************
    SUBROUTINE HYFUNCTION(SIGMA,YF,GYF,HYF,VVWW,NNODES)
	USE DEFS
    IMPLICIT NONE
!	INTEGER,PARAMETER::PREC=8
	INTEGER,PARAMETER::NTENS=6
	INTEGER::NNODES
	REAL(PREC),DIMENSION(NTENS)::SIGMA, GYF
	REAL(PREC),DIMENSION(NTENS,NTENS)::HYF
	REAL(PREC),DIMENSION(5,NNODES)::VVWW
	REAL(PREC)::YF


!CC      INTERNAL PARAMETERS
	REAL(PREC),DIMENSION(5)::SDEV, SW
	REAL(PREC),DIMENSION(4)::SG, SG2, SG8, WT, SG10
	REAL(PREC)::YG, TT
    INTEGER::JJ
!	REAL(PREC),DIMENSION(NTENS)::CSIGMA
    REAL(PREC),PARAMETER::NORM=100.0D0
    REAL(PREC),PARAMETER::NEXP=12.0D0,NEXPONE=11.0D0
!C                       	
	REAL(PREC),DIMENSION(5)::DG
	REAL(PREC),DIMENSION(15)::HGG,DDG

	
!    DO JJ=1,NTENS,1
!	  CSIGMA(JJ)=SIGMA(JJ)/NORM
!	END DO
	
    SDEV(1)=(2.0D0*SIGMA(1)-SIGMA(2)-SIGMA(3))/(SQ6*NORM)
	SDEV(2)=(SIGMA(2)-SIGMA(3))/(SQ2*NORM)
	SDEV(3)=SIGMA(4)*SQ2/NORM
	SDEV(4)=SIGMA(5)*SQ2/NORM
	SDEV(5)=SIGMA(6)*SQ2/NORM

	YG=0.0D0
	DG=0.0D0
	DDG=0.0D0
	DO JJ=1,NNODES,1
	    SW(1)=SDEV(1)*VVWW(1,JJ)
		SW(2)=SDEV(2)*VVWW(2,JJ)
		SW(3)=SDEV(3)*VVWW(3,JJ)
		SW(4)=SDEV(4)*VVWW(4,JJ)
		SW(5)=SDEV(5)*VVWW(5,JJ)
	    SG(1)=SW(1)+SW(2)+SW(3)+SW(4)+SW(5)
		SG2(1)=SG(1)*SG(1)
		SG8(1)=SG2(1)*SG2(1)
		SG8(1)=SG8(1)*SG8(1)
		SG10(1)=SG8(1)*SG2(1)
		SG(2)=SW(1)+SW(2)-SW(3)-SW(4)+SW(5)
		SG2(2)=SG(2)*SG(2)
		SG8(2)=SG2(2)*SG2(2)
		SG8(2)=SG8(2)*SG8(2)
		SG10(2)=SG8(2)*SG2(2)
		SG(3)=SW(1)+SW(2)-SW(3)+SW(4)-SW(5)
		SG2(3)=SG(3)*SG(3)
		SG8(3)=SG2(3)*SG2(3)
		SG8(3)=SG8(3)*SG8(3)
		SG10(3)=SG8(3)*SG2(3)
		SG(4)=SW(1)+SW(2)+SW(3)-SW(4)-SW(5)
		SG2(4)=SG(4)*SG(4)
		SG8(4)=SG2(4)*SG2(4)
		SG8(4)=SG8(4)*SG8(4)
		SG10(4)=SG8(4)*SG2(4)
		YG=YG+SG10(1)*SG2(1)+SG10(2)*SG2(2)+SG10(3)*SG2(3)+SG10(4)*SG2(4)
		SG2(1)=SG10(1)*SG(1)
		SG2(2)=SG10(2)*SG(2)
		SG2(3)=SG10(3)*SG(3)
		SG2(4)=SG10(4)*SG(4)
		WT(1)=SG2(1)+SG2(2)+SG2(3)+SG2(4)
		WT(2)=SG2(1)-SG2(2)-SG2(3)+SG2(4)
		WT(3)=SG2(1)-SG2(2)+SG2(3)-SG2(4)
		WT(4)=SG2(1)+SG2(2)-SG2(3)-SG2(4)
		DG(1)=DG(1)+VVWW(1,JJ)*WT(1)
		DG(2)=DG(2)+VVWW(2,JJ)*WT(1)
		DG(3)=DG(3)+VVWW(3,JJ)*WT(2)
		DG(4)=DG(4)+VVWW(4,JJ)*WT(3)
		DG(5)=DG(5)+VVWW(5,JJ)*WT(4)
		WT(1)=SG10(1)+SG10(2)+SG10(3)+SG10(4)
		WT(2)=SG10(1)-SG10(2)-SG10(3)+SG10(4)
		WT(3)=SG10(1)-SG10(2)+SG10(3)-SG10(4)
		WT(4)=SG10(1)+SG10(2)-SG10(3)-SG10(4)
		DDG(1)=DDG(1)+VVWW(1,JJ)*VVWW(1,JJ)*WT(1)
		DDG(2)=DDG(2)+VVWW(1,JJ)*VVWW(2,JJ)*WT(1)
		DDG(3)=DDG(3)+VVWW(1,JJ)*VVWW(3,JJ)*WT(2)
		DDG(4)=DDG(4)+VVWW(1,JJ)*VVWW(4,JJ)*WT(3)
		DDG(5)=DDG(5)+VVWW(1,JJ)*VVWW(5,JJ)*WT(4)
		DDG(6)=DDG(6)+VVWW(2,JJ)*VVWW(2,JJ)*WT(1)
		DDG(7)=DDG(7)+VVWW(2,JJ)*VVWW(3,JJ)*WT(2)
		DDG(8)=DDG(8)+VVWW(2,JJ)*VVWW(4,JJ)*WT(3)
		DDG(9)=DDG(9)+VVWW(2,JJ)*VVWW(5,JJ)*WT(4)
		DDG(10)=DDG(10)+VVWW(3,JJ)*VVWW(3,JJ)*WT(1)
		DDG(11)=DDG(11)+VVWW(3,JJ)*VVWW(4,JJ)*WT(4)
		DDG(12)=DDG(12)+VVWW(3,JJ)*VVWW(5,JJ)*WT(3)
		DDG(13)=DDG(13)+VVWW(4,JJ)*VVWW(4,JJ)*WT(1)
		DDG(14)=DDG(14)+VVWW(4,JJ)*VVWW(5,JJ)*WT(2)
		DDG(15)=DDG(15)+VVWW(5,JJ)*VVWW(5,JJ)*WT(1)
	END DO
!C

!C	 CALCULATE YIELD FUNCTION VALUE AND GRADIENT

!C	DG(2)=NEXP*(DG(2)/SQ2-DG(1)/SQ6)
!C  DG(1)=NEXP*SQ23*DG(1)
!C	DG(3)=NEXP*DG(3)/SQ2
!C	DG(4)=NEXP*DG(4)/SQ2
!C	DG(5)=NEXP*DG(5)/SQ2
	DG(2)=DG(2)/SQ2-DG(1)/SQ6
    DG(1)=SQ23*DG(1)
!C  NOTE:  2/SQ2 = SQ2	
	DG(3)=DG(3)*SQ2
	DG(4)=DG(4)*SQ2
	DG(5)=DG(5)*SQ2	

    HGG(1)=2.0D0*DDG(1)/3.0D0
    HGG(2)=DDG(2)/SQ3-DDG(1)/3.0D0
    HGG(3)=2.0D0*DDG(3)/SQ3
    HGG(4)=2.0D0*DDG(4)/SQ3
    HGG(5)=2.0D0*DDG(5)/SQ3	
    HGG(6)=DDG(1)/6.0D0-DDG(2)/SQ3+DDG(6)/2.0D0
    HGG(7)=DDG(7)-DDG(3)/SQ3	
	HGG(8)=DDG(8)-DDG(4)/SQ3
	HGG(9)=DDG(9)-DDG(5)/SQ3
!C  NOTE: 4*0.5 = 2.0   ()	
	HGG(10)=2.0D0*DDG(10)
	HGG(11)=2.0D0*DDG(11)
	HGG(12)=2.0D0*DDG(12)
	HGG(13)=2.0D0*DDG(13)
	HGG(14)=2.0D0*DDG(14)
	HGG(15)=2.0D0*DDG(15)
	
	YF=(0.25D0*YG)**ZPOW
	TT=YF/YG
	GYF(1)=TT*DG(1)
	GYF(2)=TT*DG(2)
	GYF(3)=-(GYF(1)+GYF(2))
	GYF(4)=TT*DG(3)
	GYF(5)=TT*DG(4)
	GYF(6)=TT*DG(5)
	HYF(1,1)=NEXPONE*(TT*HGG(1)-(GYF(1)*GYF(1))/YF)/NORM
	HYF(2,1)=NEXPONE*(TT*HGG(2)-(GYF(1)*GYF(2))/YF)/NORM
	HYF(3,1)=-(HYF(1,1)+HYF(2,1))
	HYF(4,1)=NEXPONE*(TT*HGG(3)-(GYF(1)*GYF(4))/YF)/NORM
	HYF(5,1)=NEXPONE*(TT*HGG(4)-(GYF(1)*GYF(5))/YF)/NORM
	HYF(6,1)=NEXPONE*(TT*HGG(5)-(GYF(1)*GYF(6))/YF)/NORM
	HYF(1,2)=HYF(2,1)
	HYF(2,2)=NEXPONE*(TT*HGG(6)-(GYF(2)*GYF(2))/YF)/NORM
	HYF(3,2)=-(HYF(2,1)+HYF(2,2))
	HYF(4,2)=NEXPONE*(TT*HGG(7)-(GYF(2)*GYF(4))/YF)/NORM
	HYF(5,2)=NEXPONE*(TT*HGG(8)-(GYF(2)*GYF(5))/YF)/NORM
	HYF(6,2)=NEXPONE*(TT*HGG(9)-(GYF(2)*GYF(6))/YF)/NORM
	HYF(1,3)=HYF(3,1)
	HYF(2,3)=HYF(3,2)
	HYF(3,3)=-(HYF(3,1)+HYF(3,2))
	HYF(4,3)=-(HYF(4,1)+HYF(4,2))
	HYF(5,3)=-(HYF(5,1)+HYF(5,2))
	HYF(6,3)=-(HYF(6,1)+HYF(6,2))
	HYF(1,4)=HYF(4,1)
	HYF(2,4)=HYF(4,2)
	HYF(3,4)=HYF(4,3)
	HYF(4,4)=NEXPONE*(TT*HGG(10)-(GYF(4)*GYF(4))/YF)/NORM
	HYF(5,4)=NEXPONE*(TT*HGG(11)-(GYF(4)*GYF(5))/YF)/NORM
	HYF(6,4)=NEXPONE*(TT*HGG(12)-(GYF(4)*GYF(6))/YF)/NORM
	HYF(1,5)=HYF(5,1)
	HYF(2,5)=HYF(5,2)
	HYF(3,5)=HYF(5,3)
	HYF(4,5)=HYF(5,4)
	HYF(5,5)=NEXPONE*(TT*HGG(13)-(GYF(5)*GYF(5))/YF)/NORM
	HYF(6,5)=NEXPONE*(TT*HGG(14)-(GYF(5)*GYF(6))/YF)/NORM
	HYF(1,6)=HYF(6,1)
	HYF(2,6)=HYF(6,2)
	HYF(3,6)=HYF(6,3)
	HYF(4,6)=HYF(6,4)
	HYF(5,6)=HYF(6,5)
	HYF(6,6)=NEXPONE*(TT*HGG(15)-(GYF(6)*GYF(6))/YF)/NORM
	YF=NORM*YF	
	
	RETURN
	END SUBROUTINE HYFUNCTION
	
!CC**************************** END OF FACET-10 IMPLEMENTATION
	