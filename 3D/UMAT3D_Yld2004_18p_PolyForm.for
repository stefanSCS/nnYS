!DIR$ FREEFORM
!CC*******************************************************************************
!C  UMAT: developed by S.C. Soare. 
!C  UMAT FOR TESTING YLD2004-18P IN POLYNOMIAL FORM 
!C  FURTHER DETAILS ARE IN APPENDIX-B/SECTION-2.2 OF THE ARTICLE  
!C  "ON THE USE OF NEURAL NETWORKS IN THE MODELING OF YIELD SURFACES"
!C  http://dx.doi.org/10.1002/nme.7616 
!C  THE UMAT USES ISOTROPIC ELASTICITY COUPLED WITH Yld2004-18p ORTHOTROPIC YIELD FUNCTION. 
!C  THE SUBROUTINE IS DESIGNED FOR 3D STRESS STATES. 
!C  IT IS BASED ON THE FULLY IMPLICIT RETURN MAPPING ALGORITHM (with a simple line search) 
!C  ONE abaqus-STATE VARIABLE : HARDENING PARAMETER (THE EQUIVALENT PLASTIC STRAIN).
!C  IT IS ASSUMED THAT THE USER HAS DEFINED (USING THE *ORIENTATION OPTION IN ABAQUS)
!C  A LOCAL COORDINATE SYSTEM THAT ROTATES WITH THE MATERIAL (SO THAT DEROT IS ALWAYS
!C  EQUAL WITH THE IDENTITY MATRIX).
!C*****************************************************************************
!C The vector PROPS(NPROPS) contains the material properties as defined in the 
!C  *MATERIAL=USER option in ABAQUS in the following order
!C  PROPS(1) = homogeneity degree (usually = 8; see below for other exponents (e.g., 10, 12, 14))
!C  PROPS(2) = E (Young's modulus)
!C  PROPS(3) = nuP  (Poisson's ratio)
!C  Hardening laws defined (default selected = Voce): 
!C  Swift (power-)law: sigma^bar(ep^bar) = a*(b + ep^bar)**c
!C  Voce (exp-)law: sigma^bar(ep^bar) = a - b*exp(-c*ep^bar) 
!C  Read further naming/renaming convention in the HARDENING section of this code 
!C  (other hardening laws can be implemented in the same section) 
!C  PROPS(4) = a 
!C  PROPS(5) = b
!C  PROPS(6) = c
!C  
!C  PROPS(7),...,PROPS(24): PARAMETERS OF THE YIELD FUNCTION (Yld2004-18p) 
!C  Yield func implemented: Yld2004-18p
!C  The parameters of the yield function are as follows:
!C  PROPS(7)...PROPS(15) = parameters of the first linear transformation
!C  PROPS(15)...PROPS(24) = parameters of the second linear transformation 
!C  NOTE: PARAMETERS ARE RECALCULATED ACCORDING TO APPENDIX-B/SECTION-2.2 IN THE ABOVE REFERENCE 
!C!************************************************************************************** 

!CCCC-----NOTE: the UMAT interface may vary with the ABAQUS version (below is the older interface)	
!C	SUBROUTINE UMAT(STRESS,STATEV,DDSDDE,SSE,SPD,SCD, &
!C      RPL,DDSDDT,DRPLDE,DRPLDT, &
!C      STRAN,DSTRAN,TIME,DTIME,TEMP,DTEMP,PREDEF,DPRED,CMNAME, &
!C      NDI,NSHR,NTENS,NSTATV,PROPS,NPROPS,COORDS,DROTT,PNEWDT, &
!C      CELENT,DFGRD0,DFGRD1,NOEL,NPT,LAYER,KSPT,KSTEP,KINC)

    SUBROUTINE UMAT(STRESS,STATEV,DDSDDE,SSE,SPD,SCD, &
      RPL,DDSDDT,DRPLDE,DRPLDT, &
      STRAN,DSTRAN,TIME,DTIME,TEMP,DTEMP,PREDEF,DPRED,CMNAME, &
      NDI,NSHR,NTENS,NSTATV,PROPS,NPROPS,COORDS,DROT,PNEWDT, &
      CELENT,DFGRD0,DFGRD1,NOEL,NPT,LAYER,KSPT,JSTEP,KINC)

!CCC---NOTE: the INCLUDE directive enforces implicit casting in conflict with 'IMPLICIT NONE'
!CC          use 'IMPLICIT NONE' in the testing/implementation phase and then comment it out 
!    IMPLICIT NONE      	
	INCLUDE 'ABA_PARAM.INC'
!C    INTEGER, PARAMETER :: PREC =  SELECTED_REAL_KIND(15,307)
    INTEGER, PARAMETER :: PREC = 8
!C******************************************************************************
!C  VARIABLES REQUIRED BY ABAQUS (THE ARGUMENTS OF THE SUBROUTINE)
!C  FOR A DESCRIPTION OF THE LIST OF VARIABLES SEE ABAQUS MANUAL 

!C    !!!CHARACTER(80)::  CMNAME
	CHARACTER*80 CMNAME
    REAL(PREC)::SSE,SPD,SCD,RPL,DRPLDT,DTIME,TEMP,DTEMP,PNEWDT,CELENT
    INTEGER::NDI,NSHR,NTENS,NSTATV,NPROPS,NOEL,NPT,LAYER,KSPT,KINC
    REAL(PREC),DIMENSION(NTENS):: STRESS,DDSDDT,DRPLDE,STRAN,DSTRAN
    REAL(PREC),DIMENSION (NTENS, NTENS) :: DDSDDE 
    REAL(PREC),DIMENSION(NSTATV) :: STATEV
    REAL(PREC),DIMENSION(NPROPS) :: PROPS
    REAL(PREC),DIMENSION(3,3) :: DFGRD0, DFGRD1, DROT
    REAL(PREC),DIMENSION(3) :: COORDS
    REAL(PREC),DIMENSION(2) :: TIME
    REAL(PREC),DIMENSION(1) :: PREDEF, DPRED
    INTEGER,DIMENSION(4)::JSTEP
		
!C    CHARACTER*80 CMNAME
!C	INTEGER::NDI,NSHR,NTENS,NSTATV,NPROPS,NOEL,NPT,LAYER,KSPT,KINC
!C	REAL(PREC)::SSE,SPD,SCD,RPL,DRPLDT,DTIME,TEMP,DTEMP,PNEWDT,CELENT
!C    REAL(PREC),DIMENSION::STRESS(NTENS),STATEV(NSTATV),DDSDDE(NTENS,NTENS), &
!C	DDSDDT(NTENS),DRPLDE(NTENS),STRAN(NTENS),DSTRAN(NTENS), &
!C	TIME(2),PREDEF(1),DPRED(1),PROPS(NPROPS), &
!C	COORDS(3),DROT(3,3),DFGRD0(3,3),DFGRD1(3,3)
!C	INTEGER,DIMENSION::JSTEP(4)	
	
!C*******************************************************************************
!C  INTERNAL VARIABLES OF THE SUBROUTINE
    REAL(PREC), PARAMETER::ZERO=0.0D0

!C  homogeneity degree
    INTEGER::NDEG, NEXPONE	
	
!C  elastic constants	
    REAL(PREC):: EMOD,NUPS, EC11,EC12,EC44

!C    HARDENING PARAMETERS
    REAL(PREC)::AA,BB,CC
!C     VECTORS OF MATERIAL PARAMETERS (TWO LINEAR TRANSFORMS)
    INTEGER,PARAMETER::NK9=9
	REAL(PREC),DIMENSION(NK9)::TMTA,TMTB

!C      COMPLIANCE TENSOR
    REAL(PREC),DIMENSION(NTENS,NTENS)::SCOMP

!C    STRESS TENSOR AND ITS INCREMENTS
    REAL(PREC),DIMENSION(NTENS)::SIGMA, DSIGMA, D2SIGMA

!C    EQUIVALENT PLASTIC STRAIN AND ITS INCREMENTS
    REAL(PREC):: EPBAR, DEPBAR, D2EPBAR, TEPBAR

!C    HARDENING VALUES
    REAL(PREC):: HF, HPF

!C    YIELD FUNCTION VALUE, GRADIENT AND HESSIAN
    REAL(PREC):: YF
	REAL(PREC),DIMENSION(NTENS)::GYF
	REAL(PREC),DIMENSION(NTENS,NTENS)::HYF

!C    CONVERGENCE TOLERANCES
!    REAL(PREC),PARAMETER::TOL1=1.0E-006, TOL2=1.0E-009
	REAL(PREC),PARAMETER::TOL1=DBLE(1.0E-008)

!C    TEMPORARY HOLDERS
    REAL(PREC)::TT, TTA, TTB, ZALPHA, F1, FZERO
	REAL(PREC),DIMENSION(NTENS)::YVECTOR, F2
	REAL(PREC),DIMENSION(NTENS,NTENS)::XIMAT

!C    LOOP COUNTERS
    INTEGER::K1,K2, NRK

!C    NEWTON-RAPHSON MAXIMUM NUMBER OF ITERATIONS
    INTEGER,PARAMETER:: NRMAX=300  

    INTEGER,PARAMETER,DIMENSION(15,2)::IMAP=reshape( (/1,2,3,4,5,2,3,4,5,3,4,5,4,5,5,   &
                    1,1,1,1,1,2,2,2,2,3,3,3,4,4,5/), (/15,2/) )
    REAL(PREC),ALLOCATABLE,DIMENSION(:)::CWW
    NDEG=INT(PROPS(1))
    NEXPONE=NDEG+1
	ALLOCATE(CWW(NEXPONE))
!C  USE THIS SET OF WEIGHTS FOR HOMOGENEITY DEGREE=NEXP=6		
!C  CWW=[1.0D0, -6.0D0, 15.0D0, -20.0D0, 15.0D0, -6.0D0, 1.0D0]	
!C  USE THIS SET OF WEIGHTS FOR HOMOGENEITY DEGREE=NEXP=8		
    CWW=(/1.0D0, -8.0D0, 28.0D0, -56.0D0, 70.0D0, -56.0D0, 28.0D0, -8.0D0, 1.0D0/)
!C  USE THIS SET OF WEIGHTS FOR HOMOGENEITY DEGREE=NEXP=10	
!C	CWW=[1.0, -10.0, 45.0, -120.0, 210.0, -252.0, 210.0, -120.0, 45.0, -10.0, 1.0]	
!C  USE THIS SET OF WEIGHTS FOR HOMOGENEITY DEGREE=NEXP=12	
!C	CWW=[1.0, -12.0, 66.0, -220.0, 495.0, -792.0, 924.0, -792.0, 495.0, -220.0, 66.0, -12.0, 1.0]	
!C  USE THIS SET OF WEIGHTS FOR HOMOGENEITY DEGREE=NEXP=14	
!C	CWW=[1.0, -14.0, 91.0, -364.0, 1001.0, -2002.0, 3003.0, -3432.0, 3003.0, -2002.0, 1001.0, -364.0, 91.0, -14.0, 1.0]		

!C    IMAP=reshape( (/1,2,3,4,5,2,3,4,5,3,4,5,4,5,5,   &
!C                    1,1,1,1,1,2,2,2,2,3,3,3,4,4,5/), (/15,2/) )
	
!C  elastic constants	
    EMOD=PROPS(2)
	NUPS=PROPS(3)

!C    HARDENING PARAMETERS
    AA=PROPS(4)
	BB=PROPS(5)
	CC=PROPS(6)	
!C     VECTORS OF MATERIAL PARAMETERS (TWO LINEAR TRANSFORMS)
	TMTA=PROPS(7:15)
	TMTB=PROPS(16:24)


!C********************************************
!C RECOVER THE EQUIVALENT PLASTIC STRAIN 
!C AT THE BEGINING OF THE INCREMENT
    EPBAR = STATEV(1)
      
!C!********************************************
!C DEFINE THE STIFFNESS TENSOR C
!C (IT WILL BE STORED IN DDSDDE)
    TT=(1.0D0+NUPS)*(1.0D0-2.0D0*NUPS)
	EC11=(EMOD*(1.0D0-NUPS))/TT
	EC12=(EMOD*NUPS)/TT
	EC44=0.5D0*(EC11-EC12)
    DDSDDE=ZERO
	DDSDDE(1,1)=EC11
	DDSDDE(2,1)=EC12
	DDSDDE(3,1)=EC12
	DDSDDE(1,2)=EC12
	DDSDDE(2,2)=EC11
	DDSDDE(3,2)=EC12
	DDSDDE(1,3)=EC12
	DDSDDE(2,3)=EC12
	DDSDDE(3,3)=EC11
	DDSDDE(4,4)=EC44
	DDSDDE(5,5)=EC44
	DDSDDE(6,6)=EC44

!C***********************************************
!C COMPUTE THE TRIAL STRESS : SIGMA_{N+1} = SIGMA_{N} + C[DELTA_EPSILON]
    DO K1=1,3,1
        TT = DDSDDE(K1,1)*DSTRAN(1)+DDSDDE(K1,2)*DSTRAN(2)+DDSDDE(K1,3)*DSTRAN(3)
	    DSIGMA(K1) = TT
	    SIGMA(K1)=STRESS(K1)+TT
    END DO
    DO K1=4,NTENS,1
        TT = DDSDDE(K1,K1) * DSTRAN(K1)
	    DSIGMA(K1)=TT
	    SIGMA(K1)=STRESS(K1)+TT
    END DO
!C***********************************************************	

!C CHECK YIELDING CONDITION
      CALL KHARD(HF,HPF,EPBAR,AA,BB,CC)
      CALL YFUNCTION(SIGMA, YF, TMTA, TMTB,NEXPONE,CWW)

	IF (YF <= HF) THEN
!C        ELASTIC STEP :  UPDATE STRESS
	  STRESS = SIGMA
!C      DDSDDE HAS BEEN DEFINED ABOVE
!C      THE EQUIVALENT PLASTIC STRAIN, STATEV(1), REMAINS UNCHANGED
      RETURN
	END IF

!C***********************************************
!C MAIN LOOP : RETURN MAPPING ALGORITHM


!C   DEFINE COMPLIANCE (note that it outputs ENGINEERING shears)
	EC11=1.0D0/EMOD
	EC12=-NUPS/EMOD
	EC44=1.0D0/EC44
	SCOMP=ZERO
	SCOMP(1,1)=EC11
	SCOMP(2,1)=EC12
	SCOMP(3,1)=EC12
	SCOMP(1,2)=EC12
	SCOMP(2,2)=EC11
	SCOMP(3,2)=EC12
	SCOMP(1,3)=EC12
	SCOMP(2,3)=EC12
	SCOMP(3,3)=EC11
	SCOMP(4,4)=EC44
	SCOMP(5,5)=EC44
	SCOMP(6,6)=EC44

!C     PRELIMINARY N-R STEP
!C**************************************************************      
    DEPBAR=ZERO

	CALL GYFUNCTION(SIGMA, YF, GYF, TMTA, TMTB,NEXPONE,CWW)
	F1=YF-HF

!C    ASSEMBLE XIMAT MATRIX AND Y-VECTOR
    DO K1=1,NTENS,1
	  YVECTOR(K1)=F1*GYF(K1)
	DO K2=K1,NTENS,1
	  TT=HPF*SCOMP(K1,K2)+GYF(K1)*GYF(K2)
	  XIMAT(K1,K2)=TT
	  XIMAT(K2,K1)=TT
	END DO
	END DO

!C     SOLVE FOR STRESS NR-INCREMENT
    CALL BFACTOR(NTENS,XIMAT)
	CALL BSOLVE(NTENS,XIMAT,YVECTOR,D2SIGMA)

!C     CALCULATE EQUIVALENT PLASTIC STRAIN NR-INCREMENT 
    D2EPBAR=F1
	DO K1=1,NTENS,1
	  D2EPBAR=D2EPBAR-GYF(K1)*D2SIGMA(K1)
	END DO
	D2EPBAR=D2EPBAR/HPF


!C     DO LINE SEARCH
    FZERO=F1
    CALL LSEARCH(STRESS,DSIGMA,D2SIGMA,DSTRAN,EPBAR,DEPBAR,D2EPBAR,&
	             FZERO,SCOMP,TMTA, TMTB,NEXPONE,CWW,AA,BB,CC,ZALPHA)


!C      UPDATE
    DEPBAR=DEPBAR+ZALPHA*D2EPBAR
	DO K1=1,NTENS,1
	  DSIGMA(K1)=DSIGMA(K1)-ZALPHA*D2SIGMA(K1)
	END DO
	
!C     BEGIN N-R ITERATIONS
!C******************************************************	     

    DO NRK=1,NRMAX,1

!C     CALCULATE NEW VALUES ASSOCIATED WITH NEW CURRENT STATE
      TEPBAR=EPBAR+DEPBAR
      CALL KHARD(HF,HPF,TEPBAR,AA,BB,CC)
	  SIGMA=STRESS+DSIGMA
	  CALL HYFUNCTION(SIGMA, YF, GYF, HYF, TMTA, TMTB, NEXPONE,CWW,IMAP)

	  F1=YF-HF
	  FZERO=F1*F1
	  DO K1=1,NTENS,1
        TT=DEPBAR*GYF(K1)-DSTRAN(K1)
        DO K2=1,NTENS,1
          TT=TT+SCOMP(K1,K2)*DSIGMA(K2)
        END DO
        F2(K1)=TT
        FZERO=FZERO+TT*TT
      END DO
      FZERO=DSQRT(FZERO)


!C     CHECK TOLERANCES
      IF (FZERO<TOL1) EXIT


!C    ASSEMBLE XIMAT MATRIX AND Y-VECTOR
      DO K1=1,NTENS,1
	    YVECTOR(K1)=F1*GYF(K1)+HPF*F2(K1)
	    DO K2=K1,NTENS,1
	      TT=HPF*(SCOMP(K1,K2)+DEPBAR*HYF(K1,K2))+GYF(K1)*GYF(K2)
	      XIMAT(K1,K2)=TT
	      XIMAT(K2,K1)=TT
	    END DO
	  END DO

!C     SOLVE FOR STRESS NR-INCREMENT
      CALL BFACTOR(NTENS,XIMAT)
	  CALL BSOLVE(NTENS,XIMAT,YVECTOR,D2SIGMA)
    
!C     CALCULATE EQUIVALENT PLASTIC STRAIN NR-INCREMENT 
      D2EPBAR=F1
	  DO K1=1,NTENS,1
	    D2EPBAR=D2EPBAR-GYF(K1)*D2SIGMA(K1)
	  END DO
	  D2EPBAR=D2EPBAR/HPF


!C     DO LINE SEARCH

      CALL LSEARCH(STRESS,DSIGMA,D2SIGMA,DSTRAN,EPBAR,DEPBAR,D2EPBAR,&
	               FZERO,SCOMP,TMTA,TMTB,NEXPONE,CWW,AA,BB,CC,ZALPHA)


!C      UPDATE
      DEPBAR=DEPBAR+ZALPHA*D2EPBAR
	  DO K1=1,NTENS,1
	     DSIGMA(K1)=DSIGMA(K1)-ZALPHA*D2SIGMA(K1)
	  END DO



	END DO !!! END OF NEWTON-RAPHSON ITERATIONS	
        
!C     UPDATE STATE VARIABLE
    STATEV(1)=EPBAR+DEPBAR

!C     UPDATE STRESS
    STRESS = STRESS+DSIGMA

!CCCCCCCCC****** COMPUTE TANGENT MODULUS: DDSDDE	

!C     COMPUTE XIMAT MATRIX 
    DO K1=1,NTENS,1
	DO K2=K1,NTENS,1
	  TT=SCOMP(K1,K2)+DEPBAR*HYF(K1,K2)
	  XIMAT(K1,K2)=TT
	  XIMAT(K2,K1)=TT
	END DO
	END DO

!C     INVERT XIMAT AND STORE XIMAT^(-1) INTO SCOMP (NO LONGER NEEDED)
	F2=ZERO

    CALL BFACTOR(NTENS,XIMAT)
	DO K1=1,NTENS,1
	F2(K1)=1.0D0
	CALL BSOLVE(NTENS,XIMAT,F2,DSIGMA)
	DO K2=1,NTENS,1
	SCOMP(K2,K1)=DSIGMA(K2)
	END DO
	F2(K1)=ZERO
	END DO

!C     CALCULATE  SCOMP[GYF] AND STORE IT INTO DSIGMA
    DO K1=1,NTENS,1
	TT=ZERO
	DO K2=1,NTENS,1
	TT=TT+SCOMP(K1,K2)*GYF(K2)
	END DO
	DSIGMA(K1)=TT
	END DO

!C     CALCULATE 1/K
    TT=HPF
	DO K1=1,NTENS,1
	TT=TT+GYF(K1)*DSIGMA(K1)
	END DO

!C     UPDATE DDSDDE
    DO K1=1,NTENS,1
	DO K2=K1,NTENS,1
	TTB=SCOMP(K1,K2)-DSIGMA(K1)*DSIGMA(K2)/TT
	DDSDDE(K1,K2)=TTB
	DDSDDE(K2,K1)=TTB
	END DO
	END DO

    RETURN
    END SUBROUTINE  UMAT

!C**********************************************************************	
!!! Activate the appropiate hardening law by renaming to 'KHARD' 
!!!(and deactivate the other by prepending some characters, e.g., 'zz')
    SUBROUTINE  KHARD(HF,HPF,EPBAR,AAZ,BBZ,CCZ)
!C  SWIFT(POWER LAW)    COMPUTES THE HARDENING AND ITS DERIVATIVE

    IMPLICIT NONE
    INTEGER, PARAMETER :: PREC = 8
	REAL(PREC) :: HF, HPF, AAZ, BBZ, CCZ
	REAL(PREC) :: EPBAR,TEMP

     TEMP=(BBZ+EPBAR)
     HF  = AAZ * (TEMP**CCZ)
     HPF =  (CCZ/TEMP) * HF
    
	RETURN
	END SUBROUTINE KHARD
	
      
    SUBROUTINE zzKHARD(HF,HPF,EPBAR,AAZ,BBZ,CCZ)
!C  VOCE(EXPONENTIAL LAW)    COMPUTES THE HARDENING AND ITS DERIVATIVE
    IMPLICIT NONE
    INTEGER, PARAMETER :: PREC = 8
	REAL(PREC) :: HF, HPF, AAZ, BBZ, CCZ
	REAL(PREC) :: EPBAR,TEMP
      TEMP = BBZ*DEXP(-CCZ*EPBAR)
      HF  = AAZ - TEMP
      HPF =  CCZ * TEMP

	RETURN
	END SUBROUTINE zzKHARD

!C**********************************************************************
	SUBROUTINE LSEARCH(STRESS,DSIGMA,D2SIGMA,DSTRAN,EPBAR,DEPBAR,D2EPBAR,&
	                   FZERO,SCOMP,TMTA,TMTB,NEXPONE,CWW,AAZ,BBZ,CCZ,ZALPHA)

	IMPLICIT NONE
	INTEGER,PARAMETER::PREC=8
	INTEGER,PARAMETER::NTENS=6,NK9=9

    INTEGER::NEXPONE
	REAL(PREC),DIMENSION(NEXPONE)::CWW
	REAL(PREC),DIMENSION(NTENS)::STRESS,DSIGMA,D2SIGMA,DSTRAN
	REAL(PREC),DIMENSION(NTENS,NTENS)::SCOMP
	REAL(PREC)::EPBAR,DEPBAR,D2EPBAR,FZERO,AAZ,BBZ,CCZ,ZALPHA
	REAL(PREC),DIMENSION(NK9)::TMTA, TMTB


!C     INTERNAL VARIABLES
    REAL(PREC),DIMENSION(NTENS)::SIGMA,TDSIGMA,GYF  
	REAL(PREC)::HF,HPF,TEPBAR,TDEPBAR,YF,TT,TTT
	INTEGER::KK,JJ

     
	DO KK=1,NTENS,1
	  TT=DSIGMA(KK)-D2SIGMA(KK)
      SIGMA(KK)=STRESS(KK)+TT
	  TDSIGMA(KK)=TT
	END DO
	TDEPBAR=DEPBAR+D2EPBAR
	TEPBAR=EPBAR+TDEPBAR
	
	CALL KHARD(HF,HPF,TEPBAR,AAZ,BBZ,CCZ)
	CALL GYFUNCTION(SIGMA,YF,GYF,TMTA, TMTB,NEXPONE,CWW)
	
    TTT=(YF-HF)*(YF-HF)
	DO KK=1,NTENS,1
	TT=TDEPBAR*GYF(KK)-DSTRAN(KK)
	DO JJ=1,NTENS,1
	TT=TT+SCOMP(KK,JJ)*TDSIGMA(JJ)
	END DO
	TTT=TTT+TT*TT
	END DO

    ZALPHA=1.0D0
    IF (DSQRT(TTT)>=0.6D0*FZERO) THEN
	  ZALPHA=0.25D0
    END IF

	RETURN
	END SUBROUTINE LSEARCH

!CCCCCC*********************************************************************
!CCCCCCCCC *** LINEAR SOLVER: CHOLESKY
!CCCCCC*********************************************************************

	SUBROUTINE BFACTOR(N,A)


!C     RECEIVES SYMMETRIC AND POS DEF MATRIX A OF DIMENSION N,
!C     AND RETURNS THE B-MATRIX OF THE L-U FACTORIZATION A=BB^T
!C    (THE UPPER PART OF A IS USED)
!C    (ONLY THE LOWER PART OF B IS POPULATED)
!CCCC     NOTE: THE A MATRIX IS REPLACED WITH ITS CHOLESKY DECOMPOSITION

    IMPLICIT NONE
	INTEGER,PARAMETER::PREC=8

    INTEGER::N
    REAL(PREC),DIMENSION(N,N)::A   


!C    INTERNAL VARIABLES
    INTEGER::KK,PP,JJ
    REAL(PREC)::TEMP
	REAL(PREC),PARAMETER::ZERO=0.000000000


!C     COMPUTE FIRST COLUMN 

    TEMP=DSQRT(A(1,1))
	A(1,1)=TEMP
    DO KK=2,N,1
	A(KK,1)=A(1,KK)/TEMP
    END DO

    DO PP=2,N,1
!C     COMPUTE COLUMN PP

!C     COMPUTE B(PP,PP)
    TEMP=ZERO
    DO KK=1,PP-1,1
	TEMP=TEMP+A(PP,KK)*A(PP,KK)
    END DO 
    A(PP,PP) = DSQRT(A(PP,PP)-TEMP) 

!C     COMPUTE B(JJ,PP), FOR JJ>=PP+1
    DO JJ=PP+1,N,1
    TEMP=ZERO
      DO KK=1,PP-1,1
	   TEMP=TEMP+A(PP,KK)*A(JJ,KK)
      END DO
	  A(JJ,PP)=(A(PP,JJ)-TEMP)/A(PP,PP)
    END DO 

    END DO  !!! END COMPUTE COLUMN PP

    RETURN
    END SUBROUTINE BFACTOR

    SUBROUTINE BSOLVE(N,B,Z,X)


!C     RECEIVES THE LOWER TRIANGULAR MATRIX B(N,N),
!C     THE RIGHT-HAND N-VECTOR Z,
!C     AND SOLVES FOR X THE SYSTEM (BB^T)X=Z
 
    IMPLICIT NONE
	INTEGER,PARAMETER::PREC=8

    INTEGER::N
    REAL(PREC),DIMENSION(N,N)::B
    REAL(PREC),DIMENSION(N)::Z,X

!C     INTERNAL VARIABLES
    INTEGER::KK,PP
    REAL(PREC),DIMENSION(N)::Y
    REAL(PREC)::TEMP
	REAL(PREC),PARAMETER::ZERO=0.0000000

!C     SOLVE FIRST B:Y=Z
      Y(1)=Z(1)/B(1,1)

      DO PP=2,N,1

      TEMP=ZERO
      DO KK=1,PP-1,1
      TEMP=TEMP+B(PP,KK)*Y(KK)
      END DO
      Y(PP) = (Z(PP)-TEMP)/B(PP,PP)

      END DO

!C     SOLVE FOR X
      X(N)=Y(N)/B(N,N)

      DO PP=N-1,1,-1

      TEMP=ZERO
      DO KK=PP+1,N,1
      TEMP=TEMP+B(KK,PP)*X(KK)
      END DO
      X(PP) = (Y(PP)-TEMP)/B(PP,PP)

      END DO

    RETURN
    END SUBROUTINE BSOLVE
!C***********************************************************************************

!CCCCCCC********** YIELD FUNCTION CALCULATIONS
!CCCCCCC        YFUNCTION RETURNS JUST YIELD FUNCTION VALUE
!CCCCCCC        GYFUNCTION RETURNS YIELD FUNCTION VALUE AND GRADIENT
!CCCCCCC        HYFUNCTION RETURNS YIELD FUNCTION VALUE, GRADIENT AND HESSIAN

    SUBROUTINE YFUNCTION(SIGMA, YF, TMTA, TMTB, NEXPONE, CWW)

    IMPLICIT NONE
	INTEGER,PARAMETER::PREC=8
	INTEGER,PARAMETER::NTENS=6, NK9=9
	INTEGER::NEXPONE
	REAL(PREC),DIMENSION(NTENS)::SIGMA
	REAL(PREC),DIMENSION(NK9)::TMTA,TMTB
	REAL(PREC)::YF


!CC      DATA CORRESPONDING TO THE HOMOGENEITY DEGREE
    INTEGER::NEXP,NEXPTWO
!C  USE THIS SET OF WEIGHTS FOR HOMOGENEITY DEGREE=NEXP	
	REAL(PREC),DIMENSION(NEXPONE)::CWW

!CC      INTERNAL PARAMETERS
	REAL(PREC),DIMENSION(NEXPONE)::VQA,VQB
	REAL(PREC),DIMENSION(NTENS)::IMGA,IMGB
	REAL(PREC)::IV1A,IV2A,IV3A, IV1B,IV2B,IV3B
    INTEGER::JJ
	REAL(PREC),DIMENSION(NTENS)::CSIGMA
    REAL(PREC),PARAMETER::NORM=100.0D0
!	REAL(PREC),PARAMETER::NORM=1.0D0
	
	NEXP=NEXPONE-1
	NEXPTWO=NEXPONE+1

	DO JJ=1,NTENS,1
	  CSIGMA(JJ)=SIGMA(JJ)/NORM
	END DO

!CC********************
!CC  FIRST   IMAGE STRESS
    IMGA(1)=TMTA(1)*CSIGMA(1)+TMTA(2)*CSIGMA(2)-(TMTA(1)+TMTA(2))*CSIGMA(3)
    IMGA(2)=TMTA(3)*CSIGMA(1)+TMTA(4)*CSIGMA(2)-(TMTA(3)+TMTA(4))*CSIGMA(3)
    IMGA(3)=TMTA(5)*CSIGMA(1)+TMTA(6)*CSIGMA(2)-(TMTA(5)+TMTA(6))*CSIGMA(3)
	IMGA(4)=TMTA(7)*CSIGMA(4)
	IMGA(5)=TMTA(8)*CSIGMA(5)
	IMGA(6)=TMTA(9)*CSIGMA(6)

!CC     INVARIANTS
    IV1A=IMGA(1)+IMGA(2)+IMGA(3)
	IV2A=IMGA(4)*IMGA(4)+IMGA(5)*IMGA(5)+IMGA(6)*IMGA(6)-(IMGA(1)*IMGA(2)+IMGA(2)*IMGA(3)+IMGA(3)*IMGA(1))	
	IV3A=IMGA(1)*IMGA(2)*IMGA(3)+2.0D0*IMGA(4)*IMGA(5)*IMGA(6)- &
	     (IMGA(1)*IMGA(6)*IMGA(6)+IMGA(2)*IMGA(5)*IMGA(5)+IMGA(3)*IMGA(4)*IMGA(4))

!CC  SECOND   IMAGE STRESS
    IMGB(1)=TMTB(1)*CSIGMA(1)+TMTB(2)*CSIGMA(2)-(TMTB(1)+TMTB(2))*CSIGMA(3)
    IMGB(2)=TMTB(3)*CSIGMA(1)+TMTB(4)*CSIGMA(2)-(TMTB(3)+TMTB(4))*CSIGMA(3)
    IMGB(3)=TMTB(5)*CSIGMA(1)+TMTB(6)*CSIGMA(2)-(TMTB(5)+TMTB(6))*CSIGMA(3)
	IMGB(4)=TMTB(7)*CSIGMA(4)
	IMGB(5)=TMTB(8)*CSIGMA(5)
	IMGB(6)=TMTB(9)*CSIGMA(6)

!CC     INVARIANTS
    IV1B=IMGB(1)+IMGB(2)+IMGB(3)
	IV2B=IMGB(4)*IMGB(4)+IMGB(5)*IMGB(5)+IMGB(6)*IMGB(6)-(IMGB(1)*IMGB(2)+IMGB(2)*IMGB(3)+IMGB(3)*IMGB(1))	
	IV3B=IMGB(1)*IMGB(2)*IMGB(3)+2.0D0*IMGB(4)*IMGB(5)*IMGB(6) - &
	     (IMGB(1)*IMGB(6)*IMGB(6)+IMGB(2)*IMGB(5)*IMGB(5)+IMGB(3)*IMGB(4)*IMGB(4))	

!CC     SUMS OF POWERS
    VQA(1)=3.0D0
	VQA(2)=IV1A
	VQA(3)=IV1A*IV1A+2.0D0*IV2A
	VQB(1)=3.0D0
	VQB(2)=IV1B
	VQB(3)=IV1B*IV1B+2.0D0*IV2B
!CC     THE REST OF SUMS OF POWERS
    DO JJ=4,NEXPONE,1
	  VQA(JJ)=IV1A*VQA(JJ-1)+IV2A*VQA(JJ-2)+IV3A*VQA(JJ-3)
	  VQB(JJ)=IV1B*VQB(JJ-1)+IV2B*VQB(JJ-2)+IV3B*VQB(JJ-3)
	END DO

!C	 CALCULATE YIELD FUNCTION VALUE
    YF=0.0D0
	DO JJ=1,NEXPONE,1
	  YF=YF+CWW(JJ)*VQA(NEXPTWO-JJ)*VQB(JJ)
	END DO  
      
	YF=NORM*(0.25D0*YF)**(1.0D0/DBLE(NEXP))

	RETURN
    END SUBROUTINE YFUNCTION

!CCCCCC************************************************************************

    SUBROUTINE GYFUNCTION(SIGMA, YF, GYF, TMTA, TMTB, NEXPONE, CWW)

    IMPLICIT NONE
	INTEGER,PARAMETER::PREC=8
	INTEGER,PARAMETER::NTENS=6, NK9=9
	INTEGER::NEXPONE
	REAL(PREC),DIMENSION(NTENS)::SIGMA, GYF
	REAL(PREC),DIMENSION(NK9)::TMTA,TMTB
	REAL(PREC)::YF

!CC      DATA CORRESPONDING TO THE HOMOGENEITY DEGREE
    INTEGER::NEXP,NEXPTWO
!C  USE THIS SET OF WEIGHTS FOR HOMOGENEITY DEGREE=NEXP	
	REAL(PREC),DIMENSION(NEXPONE)::CWW	
	
!CC      INTERNAL PARAMETERS
	REAL(PREC),DIMENSION(NEXPONE)::VQA,VQB
	REAL(PREC),DIMENSION(NTENS)::IMGA,IMGB
	REAL(PREC)::IV1A,IV2A,IV3A, IV1B,IV2B,IV3B,TT, TTB, TTC
    INTEGER::JJ,JJ1,JJ2,JJ3, JEXP, KK
	REAL(PREC),DIMENSION(NTENS)::CSIGMA
    REAL(PREC),PARAMETER::NORM=100.0D0
!	REAL(PREC),PARAMETER::NORM=1.0D0
!C                       'NTENS-1' : DERIVATIVES WRT SIGMA_33 EXCLUDED 	
	REAL(PREC),DIMENSION(NTENS-1)::GIV1A,GIV2A,GIV3A,GIV1B,GIV2B,GIV3B, GGG
	REAL(PREC),DIMENSION(NTENS-1,NEXPONE)::GQA,GQB
	REAL(PREC),PARAMETER::ZERO=0.0D0

	NEXP=NEXPONE-1
	NEXPTWO=NEXPONE+1
	
    DO JJ=1,NTENS,1
	  CSIGMA(JJ)=SIGMA(JJ)/NORM
	END DO

!CC********************
!CC  FIRST   IMAGE STRESS
    IMGA(1)=TMTA(1)*CSIGMA(1)+TMTA(2)*CSIGMA(2)-(TMTA(1)+TMTA(2))*CSIGMA(3)
    IMGA(2)=TMTA(3)*CSIGMA(1)+TMTA(4)*CSIGMA(2)-(TMTA(3)+TMTA(4))*CSIGMA(3)
    IMGA(3)=TMTA(5)*CSIGMA(1)+TMTA(6)*CSIGMA(2)-(TMTA(5)+TMTA(6))*CSIGMA(3)
	IMGA(4)=TMTA(7)*CSIGMA(4)
	IMGA(5)=TMTA(8)*CSIGMA(5)
	IMGA(6)=TMTA(9)*CSIGMA(6)

!CC     INVARIANTS AND THEIR GRADIENTS
    IV1A=IMGA(1)+IMGA(2)+IMGA(3)
	GIV1A=ZERO
	GIV1A(1)=TMTA(1)+TMTA(3)+TMTA(5)
	GIV1A(2)=TMTA(2)+TMTA(4)+TMTA(6)
	IV2A=IMGA(4)*IMGA(4)+IMGA(5)*IMGA(5)+IMGA(6)*IMGA(6)-(IMGA(1)*IMGA(2)+IMGA(2)*IMGA(3)+IMGA(3)*IMGA(1))
    GIV2A(1)=-((TMTA(3)+TMTA(5))*IMGA(1)+(TMTA(1)+TMTA(5))*IMGA(2)+(TMTA(1)+TMTA(3))*IMGA(3))
    GIV2A(2)=-((TMTA(4)+TMTA(6))*IMGA(1)+(TMTA(2)+TMTA(6))*IMGA(2)+(TMTA(2)+TMTA(4))*IMGA(3))
	GIV2A(3)=2.0D0*TMTA(7)*IMGA(4)
	GIV2A(4)=2.0D0*TMTA(8)*IMGA(5)
	GIV2A(5)=2.0D0*TMTA(9)*IMGA(6)
	IV3A=IMGA(1)*IMGA(2)*IMGA(3)+2.0D0*IMGA(4)*IMGA(5)*IMGA(6) - &
	     (IMGA(1)*IMGA(6)*IMGA(6)+IMGA(2)*IMGA(5)*IMGA(5)+IMGA(3)*IMGA(4)*IMGA(4))
    TT=IMGA(2)*IMGA(3)-IMGA(6)*IMGA(6)
    TTB=IMGA(1)*IMGA(3)-IMGA(5)*IMGA(5)
    TTC=IMGA(1)*IMGA(2)-IMGA(4)*IMGA(4)
	GIV3A(1)=TMTA(1)*TT+TMTA(3)*TTB+TMTA(5)*TTC
	GIV3A(2)=TMTA(2)*TT+TMTA(4)*TTB+TMTA(6)*TTC
	GIV3A(3)=2.0D0*TMTA(7)*(IMGA(5)*IMGA(6)-IMGA(3)*IMGA(4))
	GIV3A(4)=2.0D0*TMTA(8)*(IMGA(4)*IMGA(6)-IMGA(2)*IMGA(5))
	GIV3A(5)=2.0D0*TMTA(9)*(IMGA(4)*IMGA(5)-IMGA(1)*IMGA(6))
	

!CC  SECOND   IMAGE STRESS
    IMGB(1)=TMTB(1)*CSIGMA(1)+TMTB(2)*CSIGMA(2)-(TMTB(1)+TMTB(2))*CSIGMA(3)
    IMGB(2)=TMTB(3)*CSIGMA(1)+TMTB(4)*CSIGMA(2)-(TMTB(3)+TMTB(4))*CSIGMA(3)
    IMGB(3)=TMTB(5)*CSIGMA(1)+TMTB(6)*CSIGMA(2)-(TMTB(5)+TMTB(6))*CSIGMA(3)
	IMGB(4)=TMTB(7)*CSIGMA(4)
	IMGB(5)=TMTB(8)*CSIGMA(5)
	IMGB(6)=TMTB(9)*CSIGMA(6)

!CC     INVARIANTS AND THEIR GRADIENTS
    IV1B=IMGB(1)+IMGB(2)+IMGB(3)
	GIV1B=ZERO
	GIV1B(1)=TMTB(1)+TMTB(3)+TMTB(5)
	GIV1B(2)=TMTB(2)+TMTB(4)+TMTB(6)
	IV2B=IMGB(4)*IMGB(4)+IMGB(5)*IMGB(5)+IMGB(6)*IMGB(6)-(IMGB(1)*IMGB(2)+IMGB(2)*IMGB(3)+IMGB(3)*IMGB(1))	
	GIV2B(1)=-((TMTB(3)+TMTB(5))*IMGB(1)+(TMTB(1)+TMTB(5))*IMGB(2)+(TMTB(1)+TMTB(3))*IMGB(3))
    GIV2B(2)=-((TMTB(4)+TMTB(6))*IMGB(1)+(TMTB(2)+TMTB(6))*IMGB(2)+(TMTB(2)+TMTB(4))*IMGB(3))
	GIV2B(3)=2.0D0*TMTB(7)*IMGB(4)
	GIV2B(4)=2.0D0*TMTB(8)*IMGB(5)
	GIV2B(5)=2.0D0*TMTB(9)*IMGB(6)
	IV3B=IMGB(1)*IMGB(2)*IMGB(3)+2.0D0*IMGB(4)*IMGB(5)*IMGB(6) -  &
	     (IMGB(1)*IMGB(6)*IMGB(6)+IMGB(2)*IMGB(5)*IMGB(5)+IMGB(3)*IMGB(4)*IMGB(4))
    TT=IMGB(2)*IMGB(3)-IMGB(6)*IMGB(6)
    TTB=IMGB(1)*IMGB(3)-IMGB(5)*IMGB(5)
    TTC=IMGB(1)*IMGB(2)-IMGB(4)*IMGB(4)		 
	GIV3B(1)=TMTB(1)*TT+TMTB(3)*TTB+TMTB(5)*TTC
	GIV3B(2)=TMTB(2)*TT+TMTB(4)*TTB+TMTB(6)*TTC
	GIV3B(3)=2.0D0*TMTB(7)*(IMGB(5)*IMGB(6)-IMGB(3)*IMGB(4))
	GIV3B(4)=2.0D0*TMTB(8)*(IMGB(4)*IMGB(6)-IMGB(2)*IMGB(5))
	GIV3B(5)=2.0D0*TMTB(9)*(IMGB(4)*IMGB(5)-IMGB(1)*IMGB(6))

!CC     SUMS OF POWERS
    VQA(1)=3.0D0
	VQA(2)=IV1A
	VQA(3)=IV1A*IV1A+2.0D0*IV2A
	VQB(1)=3.0D0
	VQB(2)=IV1B
	VQB(3)=IV1B*IV1B+2.0D0*IV2B
	DO KK=1,5,1
	  GQA(KK,1)=ZERO
	  GQA(KK,2)=GIV1A(KK)
	  GQA(KK,3)=2.0D0*(IV1A*GIV1A(KK)+GIV2A(KK))
	  GQB(KK,1)=ZERO
	  GQB(KK,2)=GIV1B(KK)
	  GQB(KK,3)=2.0D0*(IV1B*GIV1B(KK)+GIV2B(KK))
	END DO
!CC     THE REST OF SUMS OF POWERS
    DO JJ=4,NEXPONE,1
	  JJ1=JJ-1
	  JJ2=JJ1-1
	  JJ3=JJ2-1
	  VQA(JJ)=IV1A*VQA(JJ1)+IV2A*VQA(JJ2)+IV3A*VQA(JJ3)
	  VQB(JJ)=IV1B*VQB(JJ1)+IV2B*VQB(JJ2)+IV3B*VQB(JJ3)
	  DO KK=1,5,1
	    GQA(KK,JJ)=GIV1A(KK)*VQA(JJ1)+GIV2A(KK)*VQA(JJ2)+GIV3A(KK)*VQA(JJ3)+IV1A*GQA(KK,JJ1)+IV2A*GQA(KK,JJ2)+IV3A*GQA(KK,JJ3)
	    GQB(KK,JJ)=GIV1B(KK)*VQB(JJ1)+GIV2B(KK)*VQB(JJ2)+GIV3B(KK)*VQB(JJ3)+IV1B*GQB(KK,JJ1)+IV2B*GQB(KK,JJ2)+IV3B*GQB(KK,JJ3)
	  END DO
	END DO

!C	 CALCULATE YIELD FUNCTION VALUE AND GRADIENT

    TT=ZERO
	GGG=ZERO
	DO JJ=1,NEXPONE,1
	  JEXP=NEXPTWO-JJ
	  TT=TT+CWW(JJ)*VQA(JEXP)*VQB(JJ)
	  DO KK=1,5,1
	    GGG(KK)=GGG(KK)+CWW(JJ)*(GQA(KK,JEXP)*VQB(JJ)+VQA(JEXP)*GQB(KK,JJ))
	  END DO 	
	END DO  
      
	YF=(0.25D0*TT)**(1.0D0/DBLE(NEXP))
	TT=YF/(DBLE(NEXP)*TT)
	GYF(1)=TT*GGG(1)
	GYF(2)=TT*GGG(2)
	GYF(3)=-(GYF(1)+GYF(2))
	GYF(4)=TT*GGG(3)
	GYF(5)=TT*GGG(4)
	GYF(6)=TT*GGG(5)
	YF=NORM*YF

	RETURN
	END SUBROUTINE GYFUNCTION
!CCCC***************************************************************************
!CCCC*************************************************************************************
!CC     NOT ALL ENTRIES IN THE HESSIAN NEED TO BE CALCULATED:
!CC     SOME OF THEM ARE DETERMINED BY PRESSURE INDEPENDENCE
!CC     (THE SAME WAS DONE FOR THE GRADIENT)
!CC     BY SYMMETRY, ONLY HALF (SAY, THE LOWER ONE) OF THE HESSIAN NEEDS TO BE CALCULATED
!CC     AND PRESSURE INDEPENDENCE REDUCES FURTHER BY 6 THIS NUMBER.
!CC     HENCE ONLY 15 ENTRIES NEED CALCULATION.
!CC     THEY ARE STORED IN VECTORS OF DIMENSION 15 AFTER THE FOLLOWING INDEX MAP
!CC     WITH LEFT-HAND INDEXING THE VECTOR AND THE RIGHT-HAND THE HESSIAN ENTRIES.
!CC     ---------------         
!CC      USE BELOW MAP WHEN CALCULATING HIV2A, HIV3A, HIV2B, HIV3B 
!CC     1=(1,1)
!CC     2=(2,1)
!CC     3=(4,1)
!CC     4=(5,1)
!CC     5=(6,1)
!CC     6=(2,2)
!CC     7=(4,2)
!CC     8=(5,2)
!CC     9=(6,2)
!CC     10=(4,4)
!CC     11=(5,4)
!CC     12=(6,4)
!CC     13=(5,5)
!CC     14=(6,5)
!CC     15=(6,6)
!CC---------------------------------------
!CCC    REDUCED CORRESPONDENCE (VARIABLE SIGMA(3) ELIMINATED).
!CC      USE BELOW MAP WHEN CALCULATING HQA(:,3), HQB(:,3) 
!CC    
!CC     1=(1,1)
!CC     2=(2,1)
!CC     3=(3,1)
!CC     4=(4,1)
!CC     5=(5,1)
!CC     6=(2,2)
!CC     7=(3,2)
!CC     8=(4,2)
!CC     9=(5,2)
!CC     10=(3,3)
!CC     11=(4,3)
!CC     12=(5,3)
!CC     13=(4,4)
!CC     14=(5,4)
!CC     15=(5,5)
!CCCC**************************************************************************************
    SUBROUTINE HYFUNCTION(SIGMA,YF,GYF,HYF,TMTA,TMTB,NEXPONE,CWW,IMAP)
	
    IMPLICIT NONE
	INTEGER,PARAMETER::PREC=8
	INTEGER,PARAMETER::NTENS=6,NK9=9
	INTEGER::NEXPONE
	REAL(PREC),DIMENSION(NTENS)::SIGMA, GYF
	REAL(PREC),DIMENSION(NTENS,NTENS)::HYF
	REAL(PREC),DIMENSION(NK9)::TMTA,TMTB
	REAL(PREC)::YF
	INTEGER,DIMENSION(15,2)::IMAP

!CC      DATA CORRESPONDING TO THE HOMOGENEITY DEGREE
    INTEGER::NEXP,NEXPTWO
!C  USE THIS SET OF WEIGHTS FOR HOMOGENEITY DEGREE=NEXP	
	REAL(PREC),DIMENSION(NEXPONE)::CWW

!CC      INTERNAL PARAMETERS
	REAL(PREC),DIMENSION(NEXPONE)::VQA,VQB
	REAL(PREC),DIMENSION(NTENS)::IMGA,IMGB
	REAL(PREC)::IV1A,IV2A,IV3A, IV1B,IV2B,IV3B, TT, TTB, TTC
    INTEGER::JJ, JJ1,JJ2,JJ3, KK1,KK2,KK, JEXP
	REAL(PREC),DIMENSION(NTENS)::CSIGMA
    REAL(PREC),PARAMETER::NORM=100.0D0
!	REAL(PREC),PARAMETER::NORM=1.0D0
!C                       'NTENS-1 = 5 ' : DERIVATIVES WRT SIGMA_33 EXCLUDED 	
	REAL(PREC),DIMENSION(5)::GIV1A,GIV2A,GIV3A,GIV1B,GIV2B,GIV3B, GGG
	REAL(PREC),DIMENSION(5,NEXPONE)::GQA,GQB
	REAL(PREC),DIMENSION(15)::HIV2A,HIV3A,HIV2B,HIV3B, HGG
	REAL(PREC),DIMENSION(15,NEXPONE)::HQA,HQB
	REAL(PREC),PARAMETER::ZERO=0.0D0
	
!C	INTEGER,DIMENSION(15)::TVEC


	NEXP=NEXPONE-1
	NEXPTWO=NEXPONE+1
	
    DO JJ=1,NTENS,1
	  CSIGMA(JJ)=SIGMA(JJ)/NORM
	END DO

!CC********************
!CC  FIRST   IMAGE STRESS
    IMGA(1)=TMTA(1)*CSIGMA(1)+TMTA(2)*CSIGMA(2)-(TMTA(1)+TMTA(2))*CSIGMA(3)
    IMGA(2)=TMTA(3)*CSIGMA(1)+TMTA(4)*CSIGMA(2)-(TMTA(3)+TMTA(4))*CSIGMA(3)
    IMGA(3)=TMTA(5)*CSIGMA(1)+TMTA(6)*CSIGMA(2)-(TMTA(5)+TMTA(6))*CSIGMA(3)
	IMGA(4)=TMTA(7)*CSIGMA(4)
	IMGA(5)=TMTA(8)*CSIGMA(5)
	IMGA(6)=TMTA(9)*CSIGMA(6)

!CC     INVARIANTS AND THEIR GRADIENTS
    IV1A=IMGA(1)+IMGA(2)+IMGA(3)
	GIV1A=ZERO
	GIV1A(1)=TMTA(1)+TMTA(3)+TMTA(5)
	GIV1A(2)=TMTA(2)+TMTA(4)+TMTA(6)
	IV2A=IMGA(4)*IMGA(4)+IMGA(5)*IMGA(5)+IMGA(6)*IMGA(6)-(IMGA(1)*IMGA(2)+IMGA(2)*IMGA(3)+IMGA(3)*IMGA(1))
    GIV2A(1)=-((TMTA(3)+TMTA(5))*IMGA(1)+(TMTA(1)+TMTA(5))*IMGA(2)+(TMTA(1)+TMTA(3))*IMGA(3))
    GIV2A(2)=-((TMTA(4)+TMTA(6))*IMGA(1)+(TMTA(2)+TMTA(6))*IMGA(2)+(TMTA(2)+TMTA(4))*IMGA(3))
	GIV2A(3)=2.0D0*TMTA(7)*IMGA(4)
	GIV2A(4)=2.0D0*TMTA(8)*IMGA(5)
	GIV2A(5)=2.0D0*TMTA(9)*IMGA(6)
	HIV2A=ZERO
	HIV2A(1)=-((TMTA(3)+TMTA(5))*TMTA(1)+(TMTA(1)+TMTA(5))*TMTA(3)+(TMTA(1)+TMTA(3))*TMTA(5))
	HIV2A(2)=-((TMTA(4)+TMTA(6))*TMTA(1)+(TMTA(2)+TMTA(6))*TMTA(3)+(TMTA(2)+TMTA(4))*TMTA(5))
	HIV2A(6)=-((TMTA(4)+TMTA(6))*TMTA(2)+(TMTA(2)+TMTA(6))*TMTA(4)+(TMTA(2)+TMTA(4))*TMTA(6))
	HIV2A(10)=2.0D0*TMTA(7)*TMTA(7)
	HIV2A(13)=2.0D0*TMTA(8)*TMTA(8)
	HIV2A(15)=2.0D0*TMTA(9)*TMTA(9)
	IV3A=IMGA(1)*IMGA(2)*IMGA(3)+2.0D0*IMGA(4)*IMGA(5)*IMGA(6) - &
	     (IMGA(1)*IMGA(6)*IMGA(6)+IMGA(2)*IMGA(5)*IMGA(5)+IMGA(3)*IMGA(4)*IMGA(4))
	TT=IMGA(2)*IMGA(3)-IMGA(6)*IMGA(6)
    TTB=IMGA(1)*IMGA(3)-IMGA(5)*IMGA(5)
    TTC=IMGA(1)*IMGA(2)-IMGA(4)*IMGA(4)
	GIV3A(1)=TMTA(1)*TT+TMTA(3)*TTB+TMTA(5)*TTC
	GIV3A(2)=TMTA(2)*TT+TMTA(4)*TTB+TMTA(6)*TTC
	GIV3A(3)=2.0D0*TMTA(7)*(IMGA(5)*IMGA(6)-IMGA(3)*IMGA(4))
	GIV3A(4)=2.0D0*TMTA(8)*(IMGA(4)*IMGA(6)-IMGA(2)*IMGA(5))
	GIV3A(5)=2.0D0*TMTA(9)*(IMGA(4)*IMGA(5)-IMGA(1)*IMGA(6))
	HIV3A(1)=2.0D0*(TMTA(3)*TMTA(5)*IMGA(1)+TMTA(1)*TMTA(5)*IMGA(2)+TMTA(1)*TMTA(3)*IMGA(3))
	HIV3A(2)=(TMTA(3)*TMTA(6)+TMTA(5)*TMTA(4))*IMGA(1)+(TMTA(1)*TMTA(6)+TMTA(2)*TMTA(5))*IMGA(2)  &
	         +(TMTA(1)*TMTA(4)+TMTA(2)*TMTA(3))*IMGA(3)
	HIV3A(3)=-2.0D0*TMTA(5)*TMTA(7)*IMGA(4)
	HIV3A(4)=-2.0D0*TMTA(3)*TMTA(8)*IMGA(5)
	HIV3A(5)=-2.0D0*TMTA(1)*TMTA(9)*IMGA(6)
	HIV3A(6)=2.0D0*(TMTA(4)*TMTA(6)*IMGA(1)+TMTA(2)*TMTA(6)*IMGA(2)+TMTA(2)*TMTA(4)*IMGA(3))
	HIV3A(7)=-2.0D0*TMTA(6)*TMTA(7)*IMGA(4)
	HIV3A(8)=-2.0D0*TMTA(4)*TMTA(8)*IMGA(5)
	HIV3A(9)=-2.0D0*TMTA(2)*TMTA(9)*IMGA(6)
	HIV3A(10)=-2.0D0*TMTA(7)*TMTA(7)*IMGA(3)
	HIV3A(11)=2.0D0*TMTA(7)*TMTA(8)*IMGA(6)
	HIV3A(12)=2.0D0*TMTA(7)*TMTA(9)*IMGA(5)
	HIV3A(13)=-2.0D0*TMTA(8)*TMTA(8)*IMGA(2)
	HIV3A(14)=2.0D0*TMTA(8)*TMTA(9)*IMGA(4)
	HIV3A(15)=-2.0D0*TMTA(9)*TMTA(9)*IMGA(1)

!CC  SECOND   IMAGE STRESS
    IMGB(1)=TMTB(1)*CSIGMA(1)+TMTB(2)*CSIGMA(2)-(TMTB(1)+TMTB(2))*CSIGMA(3)
    IMGB(2)=TMTB(3)*CSIGMA(1)+TMTB(4)*CSIGMA(2)-(TMTB(3)+TMTB(4))*CSIGMA(3)
    IMGB(3)=TMTB(5)*CSIGMA(1)+TMTB(6)*CSIGMA(2)-(TMTB(5)+TMTB(6))*CSIGMA(3)
	IMGB(4)=TMTB(7)*CSIGMA(4)
	IMGB(5)=TMTB(8)*CSIGMA(5)
	IMGB(6)=TMTB(9)*CSIGMA(6)

!CC     INVARIANTS AND THEIR GRADIENTS
    IV1B=IMGB(1)+IMGB(2)+IMGB(3)
	GIV1B=ZERO
	GIV1B(1)=TMTB(1)+TMTB(3)+TMTB(5)
	GIV1B(2)=TMTB(2)+TMTB(4)+TMTB(6)
	IV2B=IMGB(4)*IMGB(4)+IMGB(5)*IMGB(5)+IMGB(6)*IMGB(6)-(IMGB(1)*IMGB(2)+IMGB(2)*IMGB(3)+IMGB(3)*IMGB(1))	
	GIV2B(1)=-((TMTB(3)+TMTB(5))*IMGB(1)+(TMTB(1)+TMTB(5))*IMGB(2)+(TMTB(1)+TMTB(3))*IMGB(3))
    GIV2B(2)=-((TMTB(4)+TMTB(6))*IMGB(1)+(TMTB(2)+TMTB(6))*IMGB(2)+(TMTB(2)+TMTB(4))*IMGB(3))
	GIV2B(3)=2.0D0*TMTB(7)*IMGB(4)
	GIV2B(4)=2.0D0*TMTB(8)*IMGB(5)
	GIV2B(5)=2.0D0*TMTB(9)*IMGB(6)
	HIV2B=ZERO
	HIV2B(1)=-((TMTB(3)+TMTB(5))*TMTB(1)+(TMTB(1)+TMTB(5))*TMTB(3)+(TMTB(1)+TMTB(3))*TMTB(5))
	HIV2B(2)=-((TMTB(4)+TMTB(6))*TMTB(1)+(TMTB(2)+TMTB(6))*TMTB(3)+(TMTB(2)+TMTB(4))*TMTB(5))
	HIV2B(6)=-((TMTB(4)+TMTB(6))*TMTB(2)+(TMTB(2)+TMTB(6))*TMTB(4)+(TMTB(2)+TMTB(4))*TMTB(6))
	HIV2B(10)=2.0D0*TMTB(7)*TMTB(7)
	HIV2B(13)=2.0D0*TMTB(8)*TMTB(8)
	HIV2B(15)=2.0D0*TMTB(9)*TMTB(9)
	IV3B=IMGB(1)*IMGB(2)*IMGB(3)+2.0D0*IMGB(4)*IMGB(5)*IMGB(6) -  &
	     (IMGB(1)*IMGB(6)*IMGB(6)+IMGB(2)*IMGB(5)*IMGB(5)+IMGB(3)*IMGB(4)*IMGB(4))	
	TT=IMGB(2)*IMGB(3)-IMGB(6)*IMGB(6)
    TTB=IMGB(1)*IMGB(3)-IMGB(5)*IMGB(5)
    TTC=IMGB(1)*IMGB(2)-IMGB(4)*IMGB(4)
	GIV3B(1)=TMTB(1)*TT+TMTB(3)*TTB+TMTB(5)*TTC
	GIV3B(2)=TMTB(2)*TT+TMTB(4)*TTB+TMTB(6)*TTC
	GIV3B(3)=2.0D0*TMTB(7)*(IMGB(5)*IMGB(6)-IMGB(3)*IMGB(4))
	GIV3B(4)=2.0D0*TMTB(8)*(IMGB(4)*IMGB(6)-IMGB(2)*IMGB(5))
	GIV3B(5)=2.0D0*TMTB(9)*(IMGB(4)*IMGB(5)-IMGB(1)*IMGB(6))
	HIV3B(1)=2.0D0*(TMTB(3)*TMTB(5)*IMGB(1)+TMTB(1)*TMTB(5)*IMGB(2)+TMTB(1)*TMTB(3)*IMGB(3))
	HIV3B(2)=(TMTB(3)*TMTB(6)+TMTB(5)*TMTB(4))*IMGB(1)+(TMTB(1)*TMTB(6)+TMTB(2)*TMTB(5))*IMGB(2)+(TMTB(1)*TMTB(4)+TMTB(2)*TMTB(3))*IMGB(3)
	HIV3B(3)=-2.0D0*TMTB(5)*TMTB(7)*IMGB(4)
	HIV3B(4)=-2.0D0*TMTB(3)*TMTB(8)*IMGB(5)
	HIV3B(5)=-2.0D0*TMTB(1)*TMTB(9)*IMGB(6)
	HIV3B(6)=2.0D0*(TMTB(4)*TMTB(6)*IMGB(1)+TMTB(2)*TMTB(6)*IMGB(2)+TMTB(2)*TMTB(4)*IMGB(3))
	HIV3B(7)=-2.0D0*TMTB(6)*TMTB(7)*IMGB(4)
	HIV3B(8)=-2.0D0*TMTB(4)*TMTB(8)*IMGB(5)
	HIV3B(9)=-2.0D0*TMTB(2)*TMTB(9)*IMGB(6)
	HIV3B(10)=-2.0D0*TMTB(7)*TMTB(7)*IMGB(3)
	HIV3B(11)=2.0D0*TMTB(7)*TMTB(8)*IMGB(6)
	HIV3B(12)=2.0D0*TMTB(7)*TMTB(9)*IMGB(5)
	HIV3B(13)=-2.0D0*TMTB(8)*TMTB(8)*IMGB(2)
	HIV3B(14)=2.0D0*TMTB(8)*TMTB(9)*IMGB(4)
	HIV3B(15)=-2.0D0*TMTB(9)*TMTB(9)*IMGB(1)
    

	
!CC     SUMS OF POWERS
    VQA(1)=3.0D0
	VQA(2)=IV1A
	VQA(3)=IV1A*IV1A+2.0D0*IV2A
	
!	HQA(1,3)=2.0D0*(GIV1A(1)*GIV1A(1)+HIV2A(1))
!	HQA(2,3)=2.0D0*(GIV1A(1)*GIV1A(2)+HIV2A(2))
!	HQA(3,3)=2.0D0*(GIV1A(3)*GIV1A(1)+HIV2A(3))
!	HQA(4,3)=2.0D0*(GIV1A(1)*GIV1A(4)+HIV2A(4))
!	HQA(5,3)=2.0D0*(GIV1A(5)*GIV1A(1)+HIV2A(5))
!	HQA(6,3)=2.0D0*(GIV1A(2)*GIV1A(2)+HIV2A(6))
!	HQA(7,3)=2.0D0*(GIV1A(2)*GIV1A(3)+HIV2A(7))
!	HQA(8,3)=2.0D0*(GIV1A(4)*GIV1A(2)+HIV2A(8))
!	HQA(9,3)=2.0D0*(GIV1A(2)*GIV1A(5)+HIV2A(9))
!	HQA(10,3)=2.0D0*(GIV1A(3)*GIV1A(3)+HIV2A(10))
!	HQA(11,3)=2.0D0*(GIV1A(3)*GIV1A(4)+HIV2A(11))
!	HQA(12,3)=2.0D0*(GIV1A(5)*GIV1A(3)+HIV2A(12))
!	HQA(13,3)=2.0D0*(GIV1A(4)*GIV1A(4)+HIV2A(13))
!	HQA(14,3)=2.0D0*(GIV1A(4)*GIV1A(5)+HIV2A(14))
!	HQA(15,3)=2.0D0*(GIV1A(5)*GIV1A(5)+HIV2A(15))
	
	VQB(1)=3.0D0
	VQB(2)=IV1B
	VQB(3)=IV1B*IV1B+2.0D0*IV2B
	
	DO KK=1,5,1
	  GQA(KK,1)=ZERO
	  GQA(KK,2)=GIV1A(KK)
	  GQA(KK,3)=2.0D0*(IV1A*GIV1A(KK)+GIV2A(KK))
	  GQB(KK,1)=ZERO
	  GQB(KK,2)=GIV1B(KK)
	  GQB(KK,3)=2.0D0*(IV1B*GIV1B(KK)+GIV2B(KK))
	END DO
	
!	HQB(1,3)=2.0D0*(GIV1B(1)*GIV1B(1)+HIV2B(1))
!	HQB(2,3)=2.0D0*(GIV1B(1)*GIV1B(2)+HIV2B(2))
!	HQB(3,3)=2.0D0*(GIV1B(3)*GIV1B(1)+HIV2B(3))
!	HQB(4,3)=2.0D0*(GIV1B(1)*GIV1B(4)+HIV2B(4))
!	HQB(5,3)=2.0D0*(GIV1B(5)*GIV1B(1)+HIV2B(5))
!	HQB(6,3)=2.0D0*(GIV1B(2)*GIV1B(2)+HIV2B(6))
!	HQB(7,3)=2.0D0*(GIV1B(2)*GIV1B(3)+HIV2B(7))
!	HQB(8,3)=2.0D0*(GIV1B(4)*GIV1B(2)+HIV2B(8))
!	HQB(9,3)=2.0D0*(GIV1B(2)*GIV1B(5)+HIV2B(9))
!	HQB(10,3)=2.0D0*(GIV1B(3)*GIV1B(3)+HIV2B(10))
!	HQB(11,3)=2.0D0*(GIV1B(3)*GIV1B(4)+HIV2B(11))
!	HQB(12,3)=2.0D0*(GIV1B(5)*GIV1B(3)+HIV2B(12))
!	HQB(13,3)=2.0D0*(GIV1B(4)*GIV1B(4)+HIV2B(13))
!	HQB(14,3)=2.0D0*(GIV1B(4)*GIV1B(5)+HIV2B(14))
!	HQB(15,3)=2.0D0*(GIV1B(5)*GIV1B(5)+HIV2B(15))
	
!	TVEC=(/1,2,3,4,5,2,3,4,5,3,4,5,4,5,5/)
!	DO KK=1,15,1
!	  IMAP(KK,1)=TVEC(KK)
!	END DO  
!	TVEC=(/1,1,1,1,1,2,2,2,2,3,3,3,4,4,5/)
!	DO KK=1,15,1
!	  IMAP(KK,2)=TVEC(KK)
!	END DO
!    IMAP(:,1)=(/1,2,3,4,5,2,3,4,5,3,4,5,4,5,5/)
!	IMAP(:,2)=(/1,1,1,1,1,2,2,2,2,3,3,3,4,4,5/)
	
	DO JJ=1,15,1
	  HQA(JJ,1)=ZERO
	  HQA(JJ,2)=ZERO
	  HQB(JJ,1)=ZERO
	  HQB(JJ,2)=ZERO
	  JJ1=IMAP(JJ,1)
	  JJ2=IMAP(JJ,2)
	  HQA(JJ,3)=2.0D0*(GIV1A(JJ1)*GIV1A(JJ2)+HIV2A(JJ))
	  HQB(JJ,3)=2.0D0*(GIV1B(JJ1)*GIV1B(JJ2)+HIV2B(JJ))
	END DO  
!CC     THE REST OF SUMS OF POWERS
    DO JJ=4,NEXPONE,1
	  JJ1=JJ-1
	  JJ2=JJ1-1
	  JJ3=JJ2-1
	  VQA(JJ)=IV1A*VQA(JJ1)+IV2A*VQA(JJ2)+IV3A*VQA(JJ3)
	  VQB(JJ)=IV1B*VQB(JJ1)+IV2B*VQB(JJ2)+IV3B*VQB(JJ3)
	  DO KK=1,5,1
	    GQA(KK,JJ)=GIV1A(KK)*VQA(JJ1)+GIV2A(KK)*VQA(JJ2)+GIV3A(KK)*VQA(JJ3)+IV1A*GQA(KK,JJ1)+IV2A*GQA(KK,JJ2)+IV3A*GQA(KK,JJ3)
	    GQB(KK,JJ)=GIV1B(KK)*VQB(JJ1)+GIV2B(KK)*VQB(JJ2)+GIV3B(KK)*VQB(JJ3)+IV1B*GQB(KK,JJ1)+IV2B*GQB(KK,JJ2)+IV3B*GQB(KK,JJ3)
	  END DO
	  DO KK=1,15,1
		KK1=IMAP(KK,1)
		KK2=IMAP(KK,2)
		HQA(KK,JJ)=IV1A*HQA(KK,JJ1)+IV2A*HQA(KK,JJ2)+IV3A*HQA(KK,JJ3)+VQA(JJ2)*HIV2A(KK)+VQA(JJ3)*HIV3A(KK) &
	            +GIV1A(KK1)*GQA(KK2,JJ1)+GIV1A(KK2)*GQA(KK1,JJ1)+GIV2A(KK1)*GQA(KK2,JJ2)+GIV2A(KK2)*GQA(KK1,JJ2) &
				+GIV3A(KK1)*GQA(KK2,JJ3)+GIV3A(KK2)*GQA(KK1,JJ3)
        HQB(KK,JJ)=IV1B*HQB(KK,JJ1)+IV2B*HQB(KK,JJ2)+IV3B*HQB(KK,JJ3)+VQB(JJ2)*HIV2B(KK)+VQB(JJ3)*HIV3B(KK) &
	            +GIV1B(KK1)*GQB(KK2,JJ1)+GIV1B(KK2)*GQB(KK1,JJ1)+GIV2B(KK1)*GQB(KK2,JJ2)+GIV2B(KK2)*GQB(KK1,JJ2)  &
				+GIV3B(KK1)*GQB(KK2,JJ3)+GIV3B(KK2)*GQB(KK1,JJ3)
	  END DO   
	END DO

!C	 CALCULATE YIELD FUNCTION VALUE AND GRADIENT

    TT=ZERO
	GGG=ZERO
	HGG=ZERO
	DO JJ=1,NEXPONE,1
	  JEXP=NEXPTWO-JJ
	  TT=TT+CWW(JJ)*VQA(JEXP)*VQB(JJ)
	  DO KK=1,5,1
	    GGG(KK)=GGG(KK)+CWW(JJ)*(GQA(KK,JEXP)*VQB(JJ)+VQA(JEXP)*GQB(KK,JJ))
	  END DO 
	  DO KK=1,15,1
	    KK1=IMAP(KK,1)
		KK2=IMAP(KK,2)
	    HGG(KK)=HGG(KK)+CWW(JJ)*(HQA(KK,JEXP)*VQB(JJ)+VQA(JEXP)*HQB(KK,JJ)+GQA(KK1,JEXP)*GQB(KK2,JJ)+GQA(KK2,JEXP)*GQB(KK1,JJ))
	  END DO	
	END DO  
      
	YF=(0.25D0*TT)**(1.0D0/DBLE(NEXP))
	TT=YF/(DBLE(NEXP)*TT)
	GYF(1)=TT*GGG(1)
	GYF(2)=TT*GGG(2)
	GYF(3)=-(GYF(1)+GYF(2))
	GYF(4)=TT*GGG(3)
	GYF(5)=TT*GGG(4)
	GYF(6)=TT*GGG(5)
	TTB=DBLE(NEXP-1)/YF
	HYF(1,1)=(TT*HGG(1)-TTB*(GYF(1)*GYF(1)))/NORM
	HYF(2,1)=(TT*HGG(2)-TTB*(GYF(1)*GYF(2)))/NORM
	HYF(3,1)=-(HYF(1,1)+HYF(2,1))
	HYF(4,1)=(TT*HGG(3)-TTB*(GYF(1)*GYF(4)))/NORM
	HYF(5,1)=(TT*HGG(4)-TTB*(GYF(1)*GYF(5)))/NORM
	HYF(6,1)=(TT*HGG(5)-TTB*(GYF(1)*GYF(6)))/NORM
	HYF(1,2)=HYF(2,1)
	HYF(2,2)=(TT*HGG(6)-TTB*(GYF(2)*GYF(2)))/NORM
	HYF(3,2)=-(HYF(2,1)+HYF(2,2))
	HYF(4,2)=(TT*HGG(7)-TTB*(GYF(2)*GYF(4)))/NORM
	HYF(5,2)=(TT*HGG(8)-TTB*(GYF(2)*GYF(5)))/NORM
	HYF(6,2)=(TT*HGG(9)-TTB*(GYF(2)*GYF(6)))/NORM
	HYF(1,3)=HYF(3,1)
	HYF(2,3)=HYF(3,2)
	HYF(3,3)=-(HYF(3,1)+HYF(3,2))
	HYF(4,3)=-(HYF(4,1)+HYF(4,2))
	HYF(5,3)=-(HYF(5,1)+HYF(5,2))
	HYF(6,3)=-(HYF(6,1)+HYF(6,2))
	HYF(1,4)=HYF(4,1)
	HYF(2,4)=HYF(4,2)
	HYF(3,4)=HYF(4,3)
	HYF(4,4)=(TT*HGG(10)-TTB*(GYF(4)*GYF(4)))/NORM
	HYF(5,4)=(TT*HGG(11)-TTB*(GYF(4)*GYF(5)))/NORM
	HYF(6,4)=(TT*HGG(12)-TTB*(GYF(4)*GYF(6)))/NORM
	HYF(1,5)=HYF(5,1)
	HYF(2,5)=HYF(5,2)
	HYF(3,5)=HYF(5,3)
	HYF(4,5)=HYF(5,4)
	HYF(5,5)=(TT*HGG(13)-TTB*(GYF(5)*GYF(5)))/NORM
	HYF(6,5)=(TT*HGG(14)-TTB*(GYF(5)*GYF(6)))/NORM
	HYF(1,6)=HYF(6,1)
	HYF(2,6)=HYF(6,2)
	HYF(3,6)=HYF(6,3)
	HYF(4,6)=HYF(6,4)
	HYF(5,6)=HYF(6,5)
	HYF(6,6)=(TT*HGG(15)-TTB*(GYF(6)*GYF(6)))/NORM
	YF=NORM*YF	
	
	RETURN
	END SUBROUTINE HYFUNCTION
	
!CC**************************** END OF YLD'2004-18P IMPLEMENTATION
	